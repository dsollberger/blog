<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Median Data Scientist on The Median Data Scientist</title>
    <link>/</link>
    <description>Recent content in The Median Data Scientist on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Unsupervised Learning</title>
      <link>/post/introduction-to-unsupervised-learning/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-unsupervised-learning/</guid>
      <description>&lt;div id=&#34;unsupervised-learning&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Unsupervised Learning&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised learning&lt;/strong&gt; has the goal of making predictions with a set of &lt;em&gt;known&lt;/em&gt; labels for the response variable.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;unsupervised learning&lt;/strong&gt;, we try to find structure in the data of the response variable without predetermined labels.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goal: organize the items available in the &lt;code&gt;Animal Crossing&lt;/code&gt; video game&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-set-animal-crossing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data set: Animal Crossing&lt;/h1&gt;
&lt;p&gt;Source: VillagerDB, MetaCritic, and TidyTuesday&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-05-05/readme.md&#34;&gt;Animal Crossing Tidy Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;ggrepel&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)

# critic &amp;lt;- readr::read_tsv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv&amp;#39;)
# user_reviews &amp;lt;- readr::read_tsv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv&amp;#39;)
items &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&amp;#39;)
# villagers &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploratory Data Analysis&lt;/h1&gt;
&lt;div id=&#34;variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;variables&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(items)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4565   16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(items)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## tibble [4,565 x 16] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ num_id       : num [1:4565] 12 14 17 19 20 21 23 24 26 26 ...
##  $ id           : chr [1:4565] &amp;quot;3d-glasses&amp;quot; &amp;quot;a-tee&amp;quot; &amp;quot;abstract-wall&amp;quot; &amp;quot;academy-uniform&amp;quot; ...
##  $ name         : chr [1:4565] &amp;quot;3D Glasses&amp;quot; &amp;quot;A Tee&amp;quot; &amp;quot;Abstract Wall&amp;quot; &amp;quot;Academy Uniform&amp;quot; ...
##  $ category     : chr [1:4565] &amp;quot;Accessories&amp;quot; &amp;quot;Tops&amp;quot; &amp;quot;Wallpaper&amp;quot; &amp;quot;Dresses&amp;quot; ...
##  $ orderable    : logi [1:4565] NA NA TRUE NA FALSE TRUE ...
##  $ sell_value   : num [1:4565] 122 140 390 520 2000 375 420 330 8990 8990 ...
##  $ sell_currency: chr [1:4565] &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; ...
##  $ buy_value    : num [1:4565] 490 560 1560 2080 NA ...
##  $ buy_currency : chr [1:4565] &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; ...
##  $ sources      : chr [1:4565] NA NA &amp;quot;Nook&amp;#39;s Cranny&amp;quot; NA ...
##  $ customizable : logi [1:4565] NA NA NA NA NA FALSE ...
##  $ recipe       : num [1:4565] NA NA NA NA NA NA NA NA NA NA ...
##  $ recipe_id    : chr [1:4565] NA NA NA NA ...
##  $ games_id     : chr [1:4565] &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; ...
##  $ id_full      : chr [1:4565] &amp;quot;item-3d-glasses&amp;quot; &amp;quot;item-a-tee&amp;quot; NA &amp;quot;item-academy-uniform&amp;quot; ...
##  $ image_url    : chr [1:4565] &amp;quot;https://villagerdb.com/images/items/full/3d-glasses.b8e1b5a.png&amp;quot; &amp;quot;https://villagerdb.com/images/items/full/a-tee.a1af443.png&amp;quot; NA &amp;quot;https://villagerdb.com/images/items/full/academy-uniform.4475eb5.png&amp;quot; ...
##  - attr(*, &amp;quot;problems&amp;quot;)= tibble [2 x 5] (S3: tbl_df/tbl/data.frame)
##   ..$ row     : int [1:2] 4472 4473
##   ..$ col     : chr [1:2] &amp;quot;customizable&amp;quot; &amp;quot;customizable&amp;quot;
##   ..$ expected: chr [1:2] &amp;quot;1/0/T/F/TRUE/FALSE&amp;quot; &amp;quot;1/0/T/F/TRUE/FALSE&amp;quot;
##   ..$ actual  : chr [1:2] &amp;quot;Yes&amp;quot; &amp;quot;Yes&amp;quot;
##   ..$ file    : chr [1:2] &amp;quot;&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&amp;#39;&amp;quot; &amp;quot;&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&amp;#39;&amp;quot;
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   num_id = col_double(),
##   ..   id = col_character(),
##   ..   name = col_character(),
##   ..   category = col_character(),
##   ..   orderable = col_logical(),
##   ..   sell_value = col_double(),
##   ..   sell_currency = col_character(),
##   ..   buy_value = col_double(),
##   ..   buy_currency = col_character(),
##   ..   sources = col_character(),
##   ..   customizable = col_logical(),
##   ..   recipe = col_double(),
##   ..   recipe_id = col_character(),
##   ..   games_id = col_character(),
##   ..   id_full = col_character(),
##   ..   image_url = col_character()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(items$category)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Accessories     Bottoms        Bugs     Dresses        Fish    Flooring 
##         123         142          80         239         101         324 
##     Flowers     Fossils       Fruit   Furniture        Hats       Music 
##         109          76          12        1264         230          95 
##      Photos   Seashells       Shoes       Socks       Tools        Tops 
##         840           8          89          60          74         289 
##   Umbrellas     Usables   Wallpaper 
##          67          88         255&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(items$buy_value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&amp;#39;s 
##      40     870    1300    6960    2700 1200000    1014&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# table(items$buy_currency)
summary(items$sell_value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&amp;#39;s 
##       5     240     390    2261    1000  300000      36&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(items$num_id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##      12    1722    3569    3662    5607    7443&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(items$recipe)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&amp;#39;s 
##   1.000   2.000   3.000   4.711   6.000  90.000    3977&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;numerical-variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;numerical variables&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;items %&amp;gt;%
  ggplot(aes(x = buy_value, y = sell_value, color = category)) +
  geom_point() +
  coord_trans(x = &amp;quot;log10&amp;quot;) + 
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Sell Values vs Buy Values&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = c(0, 10, 100, 1000, 10000, 100000, 1000000),
                     labels = c(&amp;quot;0&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;100&amp;quot;, &amp;quot;1000&amp;quot;, &amp;quot;10000&amp;quot;, &amp;quot;100000&amp;quot;, &amp;quot;1000000&amp;quot;)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = c(0, 50000, 100000, 150000, 200000, 250000, 300000),
                     labels = c(&amp;quot;0&amp;quot;, &amp;quot;50000&amp;quot;, &amp;quot;100000&amp;quot;, &amp;quot;150000&amp;quot;, &amp;quot;200000&amp;quot;, &amp;quot;250000&amp;quot;, &amp;quot;300000&amp;quot;)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 1035 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;k-means-clustering&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;K-Means Clustering&lt;/h1&gt;
&lt;div id=&#34;first-look&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;first look&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_numerical &amp;lt;- items %&amp;gt;%
  select(num_id, buy_value, sell_value, recipe) %&amp;gt;%
  filter(complete.cases(.))

summary(df_numerical$buy_value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##     240    3780    7080   16912   16480  320000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(df_numerical$sell_value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##      60     945    1770    4228    4120   80000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clusters4 &amp;lt;- kmeans(df_numerical, 4)

items_with_clusters &amp;lt;- cbind(df_numerical, clusters4$cluster)
colnames(items_with_clusters) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;buy&amp;quot;, &amp;quot;sell&amp;quot;, &amp;quot;recipe&amp;quot;, &amp;quot;cluster&amp;quot;)
items_with_clusters$cluster &amp;lt;- factor(items_with_clusters$cluster)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x_breaks &amp;lt;- c(0, 10, 100, 1000, 10000, 100000, 1000000)
y_breaks &amp;lt;- c(0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000)

items_with_clusters %&amp;gt;%
  ggplot() +
  geom_point(aes(x = buy, y = sell)) +
  geom_point(aes(x = buy_value, y = sell_value), 
             data = data.frame(clusters4$centers),
             size = 5,
             color = &amp;quot;blue&amp;quot;) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Cluster Centers&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;items_with_clusters %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;4 Clusters&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;selecting-the-amount-of-clusters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;selecting the amount of clusters&lt;/h2&gt;
&lt;p&gt;Selecting the number of clusters is rather subjective.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;too few clusters: items that are “far” from each other are still grouped together&lt;/li&gt;
&lt;li&gt;too many clusters: harder to describe and label groups later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We start with an &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;-dimensional data set of numerical variables and prescribe a number &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; for the number of clusters and run the &lt;code&gt;kmeans&lt;/code&gt; algorithm.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each cluster &lt;span class=&#34;math inline&#34;&gt;\(C_{k}\)&lt;/span&gt; has &lt;span class=&#34;math inline&#34;&gt;\(n_{k}\)&lt;/span&gt; points labeled &lt;span class=&#34;math inline&#34;&gt;\(x_{i}\)&lt;/span&gt; in &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;-dimensional space&lt;/li&gt;
&lt;li&gt;Each cluster has a cluster center &lt;span class=&#34;math inline&#34;&gt;\(\mu_{k}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Each cluster has a &lt;em&gt;within-sum-of-squares&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[WSS = \displaystyle\sum_{x_{i} \in C_{k}} (x_{i} - \mu_{k})^{2}\]&lt;/span&gt;
Thus, our metric for the clustering will be the reported &lt;em&gt;total-within-sum-of-squares&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[TWSS = \displaystyle\sum_{j=1}^{k}\sum_{x_{i} \in C_{k}} (x_{i} - \mu_{k})^{2}\]&lt;/span&gt;
For example, the total-within-sum-of-squares for the 4-cluster results above is 3.148635410^{10}.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;scree-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;scree plot&lt;/h2&gt;
&lt;p&gt;It is common practice to build a &lt;em&gt;scree plot&lt;/em&gt; and look for the “elbow”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clusters1 &amp;lt;- kmeans(df_numerical, 1)
clusters2 &amp;lt;- kmeans(df_numerical, 2)
clusters3 &amp;lt;- kmeans(df_numerical, 3)
clusters4 &amp;lt;- kmeans(df_numerical, 4)
clusters5 &amp;lt;- kmeans(df_numerical, 5)
clusters6 &amp;lt;- kmeans(df_numerical, 6)
clusters7 &amp;lt;- kmeans(df_numerical, 7)
clusters8 &amp;lt;- kmeans(df_numerical, 8)
clusters9 &amp;lt;- kmeans(df_numerical, 9)

TSS_vector &amp;lt;- c(clusters1$tot.withinss, clusters2$tot.withinss, clusters3$tot.withinss, 
                clusters4$tot.withinss, clusters5$tot.withinss, clusters6$tot.withinss, 
                clusters7$tot.withinss, clusters8$tot.withinss, clusters9$tot.withinss)

k_vals &amp;lt;- 1:9
df_for_scree_plot &amp;lt;- data.frame(k_vals, TSS_vector)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_for_scree_plot %&amp;gt;%
  ggplot(aes(x = k_vals, y = TSS_vector)) +
  geom_point(size = 3) +
  geom_line() +
  labs(title = &amp;quot;Scree Plot&amp;quot;,
       subtitle = &amp;quot;(find the &amp;#39;elbow&amp;#39;)&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;,
       x = &amp;quot;number of clusters&amp;quot;,
       y = &amp;quot;total-within-sum-of-squares&amp;quot;) +
  scale_x_discrete(name = &amp;quot;number of clusters&amp;quot;,
                   breaks = paste(1:9),
                   labels = paste(1:9),
                   limits = 1:9) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It appears that the optimal number of clusters for our data set is &lt;span class=&#34;math inline&#34;&gt;\(k = 3\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;items_with_clusters &amp;lt;- cbind(df_numerical, clusters3$cluster)
colnames(items_with_clusters) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;buy&amp;quot;, &amp;quot;sell&amp;quot;, &amp;quot;recipe&amp;quot;, &amp;quot;cluster&amp;quot;)
items_with_clusters$cluster &amp;lt;- factor(items_with_clusters$cluster)

df_categorical &amp;lt;- items %&amp;gt;%
  select(num_id, name, category) %&amp;gt;%
  filter(complete.cases(.))
colnames(df_categorical) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;category&amp;quot;)

main_df &amp;lt;- df_categorical %&amp;gt;%
  inner_join(items_with_clusters, by = &amp;quot;ID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;main_df %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Optimal Clustering&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;appendix-label-a-sample-of-points-from-each-cluster&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Appendix: label a sample of points from each cluster&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;label_df &amp;lt;- main_df %&amp;gt;%
  group_by(cluster) %&amp;gt;%
  sample_n(2)

main_df %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  geom_label_repel(aes(x = buy, y = sell, label = name), 
                   data = label_df,
                   nudge_x = -1000,
                   nudge_y = 10000) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Optimal Clustering&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Unsupervised Learning</title>
      <link>/post/introduction-to-unsupervised-learning/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-unsupervised-learning/</guid>
      <description>

&lt;h1 id=&#34;unsupervised-learning&#34;&gt;Unsupervised Learning&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised learning&lt;/strong&gt; has the goal of making predictions with a set of &lt;em&gt;known&lt;/em&gt; labels for the response variable.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;unsupervised learning&lt;/strong&gt;, we try to find structure in the data of the response variable without predetermined labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goal: organize the items available in the &lt;code&gt;Animal Crossing&lt;/code&gt; video game&lt;/p&gt;

&lt;h1 id=&#34;data-set-animal-crossing&#34;&gt;Data set: Animal Crossing&lt;/h1&gt;

&lt;p&gt;Source:  VillagerDB, MetaCritic, and TidyTuesday&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-05-05/readme.md&#34; target=&#34;_blank&#34;&gt;Animal Crossing Tidy Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&amp;quot;ggrepel&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)

# critic &amp;lt;- readr::read_tsv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv&#39;)
# user_reviews &amp;lt;- readr::read_tsv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv&#39;)
items &amp;lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&#39;)
# villagers &amp;lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exploratory-data-analysis&#34;&gt;Exploratory Data Analysis&lt;/h1&gt;

&lt;h2 id=&#34;variables&#34;&gt;variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(items)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 4565   16
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(items)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## tibble [4,565 x 16] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ num_id       : num [1:4565] 12 14 17 19 20 21 23 24 26 26 ...
##  $ id           : chr [1:4565] &amp;quot;3d-glasses&amp;quot; &amp;quot;a-tee&amp;quot; &amp;quot;abstract-wall&amp;quot; &amp;quot;academy-uniform&amp;quot; ...
##  $ name         : chr [1:4565] &amp;quot;3D Glasses&amp;quot; &amp;quot;A Tee&amp;quot; &amp;quot;Abstract Wall&amp;quot; &amp;quot;Academy Uniform&amp;quot; ...
##  $ category     : chr [1:4565] &amp;quot;Accessories&amp;quot; &amp;quot;Tops&amp;quot; &amp;quot;Wallpaper&amp;quot; &amp;quot;Dresses&amp;quot; ...
##  $ orderable    : logi [1:4565] NA NA TRUE NA FALSE TRUE ...
##  $ sell_value   : num [1:4565] 122 140 390 520 2000 375 420 330 8990 8990 ...
##  $ sell_currency: chr [1:4565] &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; ...
##  $ buy_value    : num [1:4565] 490 560 1560 2080 NA ...
##  $ buy_currency : chr [1:4565] &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; &amp;quot;bells&amp;quot; ...
##  $ sources      : chr [1:4565] NA NA &amp;quot;Nook&#39;s Cranny&amp;quot; NA ...
##  $ customizable : logi [1:4565] NA NA NA NA NA FALSE ...
##  $ recipe       : num [1:4565] NA NA NA NA NA NA NA NA NA NA ...
##  $ recipe_id    : chr [1:4565] NA NA NA NA ...
##  $ games_id     : chr [1:4565] &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; &amp;quot;nh&amp;quot; ...
##  $ id_full      : chr [1:4565] &amp;quot;item-3d-glasses&amp;quot; &amp;quot;item-a-tee&amp;quot; NA &amp;quot;item-academy-uniform&amp;quot; ...
##  $ image_url    : chr [1:4565] &amp;quot;https://villagerdb.com/images/items/full/3d-glasses.b8e1b5a.png&amp;quot; &amp;quot;https://villagerdb.com/images/items/full/a-tee.a1af443.png&amp;quot; NA &amp;quot;https://villagerdb.com/images/items/full/academy-uniform.4475eb5.png&amp;quot; ...
##  - attr(*, &amp;quot;problems&amp;quot;)= tibble [2 x 5] (S3: tbl_df/tbl/data.frame)
##   ..$ row     : int [1:2] 4472 4473
##   ..$ col     : chr [1:2] &amp;quot;customizable&amp;quot; &amp;quot;customizable&amp;quot;
##   ..$ expected: chr [1:2] &amp;quot;1/0/T/F/TRUE/FALSE&amp;quot; &amp;quot;1/0/T/F/TRUE/FALSE&amp;quot;
##   ..$ actual  : chr [1:2] &amp;quot;Yes&amp;quot; &amp;quot;Yes&amp;quot;
##   ..$ file    : chr [1:2] &amp;quot;&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&#39;&amp;quot; &amp;quot;&#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&#39;&amp;quot;
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   num_id = col_double(),
##   ..   id = col_character(),
##   ..   name = col_character(),
##   ..   category = col_character(),
##   ..   orderable = col_logical(),
##   ..   sell_value = col_double(),
##   ..   sell_currency = col_character(),
##   ..   buy_value = col_double(),
##   ..   buy_currency = col_character(),
##   ..   sources = col_character(),
##   ..   customizable = col_logical(),
##   ..   recipe = col_double(),
##   ..   recipe_id = col_character(),
##   ..   games_id = col_character(),
##   ..   id_full = col_character(),
##   ..   image_url = col_character()
##   .. )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;table(items$category)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## 
## Accessories     Bottoms        Bugs     Dresses        Fish    Flooring 
##         123         142          80         239         101         324 
##     Flowers     Fossils       Fruit   Furniture        Hats       Music 
##         109          76          12        1264         230          95 
##      Photos   Seashells       Shoes       Socks       Tools        Tops 
##         840           8          89          60          74         289 
##   Umbrellas     Usables   Wallpaper 
##          67          88         255
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(items$buy_value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##      40     870    1300    6960    2700 1200000    1014
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# table(items$buy_currency)
summary(items$sell_value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##       5     240     390    2261    1000  300000      36
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(items$num_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##      12    1722    3569    3662    5607    7443
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(items$recipe)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA&#39;s 
##   1.000   2.000   3.000   4.711   6.000  90.000    3977
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;numerical-variables&#34;&gt;numerical variables&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;items %&amp;gt;%
  ggplot(aes(x = buy_value, y = sell_value, color = category)) +
  geom_point() +
  coord_trans(x = &amp;quot;log10&amp;quot;) + 
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Sell Values vs Buy Values&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = c(0, 10, 100, 1000, 10000, 100000, 1000000),
                     labels = c(&amp;quot;0&amp;quot;, &amp;quot;10&amp;quot;, &amp;quot;100&amp;quot;, &amp;quot;1000&amp;quot;, &amp;quot;10000&amp;quot;, &amp;quot;100000&amp;quot;, &amp;quot;1000000&amp;quot;)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = c(0, 50000, 100000, 150000, 200000, 250000, 300000),
                     labels = c(&amp;quot;0&amp;quot;, &amp;quot;50000&amp;quot;, &amp;quot;100000&amp;quot;, &amp;quot;150000&amp;quot;, &amp;quot;200000&amp;quot;, &amp;quot;250000&amp;quot;, &amp;quot;300000&amp;quot;)) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Warning: Removed 1035 rows containing missing values (geom_point).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;k-means-clustering&#34;&gt;K-Means Clustering&lt;/h1&gt;

&lt;h2 id=&#34;first-look&#34;&gt;first look&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df_numerical &amp;lt;- items %&amp;gt;%
  select(num_id, buy_value, sell_value, recipe) %&amp;gt;%
  filter(complete.cases(.))

summary(df_numerical$buy_value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##     240    3780    7080   16912   16480  320000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(df_numerical$sell_value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##      60     945    1770    4228    4120   80000
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusters4 &amp;lt;- kmeans(df_numerical, 4)

items_with_clusters &amp;lt;- cbind(df_numerical, clusters4$cluster)
colnames(items_with_clusters) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;buy&amp;quot;, &amp;quot;sell&amp;quot;, &amp;quot;recipe&amp;quot;, &amp;quot;cluster&amp;quot;)
items_with_clusters$cluster &amp;lt;- factor(items_with_clusters$cluster)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x_breaks &amp;lt;- c(0, 10, 100, 1000, 10000, 100000, 1000000)
y_breaks &amp;lt;- c(0, 10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000)

items_with_clusters %&amp;gt;%
  ggplot() +
  geom_point(aes(x = buy, y = sell)) +
  geom_point(aes(x = buy_value, y = sell_value), 
             data = data.frame(clusters4$centers),
             size = 5,
             color = &amp;quot;blue&amp;quot;) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Cluster Centers&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;items_with_clusters %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;4 Clusters&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;selecting-the-amount-of-clusters&#34;&gt;selecting the amount of clusters&lt;/h2&gt;

&lt;p&gt;Selecting the number of clusters is rather subjective.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;too few clusters: items that are &amp;ldquo;far&amp;rdquo; from each other are still grouped together&lt;/li&gt;
&lt;li&gt;too many clusters: harder to describe and label groups later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We start with an $d$-dimensional data set of numerical variables and prescribe a number $k$ for the number of clusters and run the &lt;code&gt;kmeans&lt;/code&gt; algorithm.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each cluster $C&lt;em&gt;{k}$ has $n&lt;/em&gt;{k}$ points labeled $x_{i}$ in $d$-dimensional space&lt;/li&gt;
&lt;li&gt;Each cluster has a cluster center $\mu_{k}$&lt;/li&gt;
&lt;li&gt;Each cluster has a &lt;em&gt;within-sum-of-squares&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$WSS = \displaystyle\sum&lt;em&gt;{x&lt;/em&gt;{i} \in C&lt;em&gt;{k}} (x&lt;/em&gt;{i} - \mu_{k})^{2}$$
Thus, our metric for the clustering will be the reported &lt;em&gt;total-within-sum-of-squares&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;$$TWSS = \displaystyle\sum&lt;em&gt;{j=1}^{k}\sum&lt;/em&gt;{x&lt;em&gt;{i} \in C&lt;/em&gt;{k}} (x&lt;em&gt;{i} - \mu&lt;/em&gt;{k})^{2}$$
For example, the total-within-sum-of-squares for the 4-cluster results above is 3.1486354\times 10^{10}.&lt;/p&gt;

&lt;h2 id=&#34;scree-plot&#34;&gt;scree plot&lt;/h2&gt;

&lt;p&gt;It is common practice to build a &lt;em&gt;scree plot&lt;/em&gt; and look for the &amp;ldquo;elbow&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clusters1 &amp;lt;- kmeans(df_numerical, 1)
clusters2 &amp;lt;- kmeans(df_numerical, 2)
clusters3 &amp;lt;- kmeans(df_numerical, 3)
clusters4 &amp;lt;- kmeans(df_numerical, 4)
clusters5 &amp;lt;- kmeans(df_numerical, 5)
clusters6 &amp;lt;- kmeans(df_numerical, 6)
clusters7 &amp;lt;- kmeans(df_numerical, 7)
clusters8 &amp;lt;- kmeans(df_numerical, 8)
clusters9 &amp;lt;- kmeans(df_numerical, 9)

TSS_vector &amp;lt;- c(clusters1$tot.withinss, clusters2$tot.withinss, clusters3$tot.withinss, 
                clusters4$tot.withinss, clusters5$tot.withinss, clusters6$tot.withinss, 
                clusters7$tot.withinss, clusters8$tot.withinss, clusters9$tot.withinss)

k_vals &amp;lt;- 1:9
df_for_scree_plot &amp;lt;- data.frame(k_vals, TSS_vector)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df_for_scree_plot %&amp;gt;%
  ggplot(aes(x = k_vals, y = TSS_vector)) +
  geom_point(size = 3) +
  geom_line() +
  labs(title = &amp;quot;Scree Plot&amp;quot;,
       subtitle = &amp;quot;(find the &#39;elbow&#39;)&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;,
       x = &amp;quot;number of clusters&amp;quot;,
       y = &amp;quot;total-within-sum-of-squares&amp;quot;) +
  scale_x_discrete(name = &amp;quot;number of clusters&amp;quot;,
                   breaks = paste(1:9),
                   labels = paste(1:9),
                   limits = 1:9) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It appears that the optimal number of clusters for our data set is $k = 3$.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;items_with_clusters &amp;lt;- cbind(df_numerical, clusters3$cluster)
colnames(items_with_clusters) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;buy&amp;quot;, &amp;quot;sell&amp;quot;, &amp;quot;recipe&amp;quot;, &amp;quot;cluster&amp;quot;)
items_with_clusters$cluster &amp;lt;- factor(items_with_clusters$cluster)

df_categorical &amp;lt;- items %&amp;gt;%
  select(num_id, name, category) %&amp;gt;%
  filter(complete.cases(.))
colnames(df_categorical) &amp;lt;- c(&amp;quot;ID&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;category&amp;quot;)

main_df &amp;lt;- df_categorical %&amp;gt;%
  inner_join(items_with_clusters, by = &amp;quot;ID&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;main_df %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Optimal Clustering&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;appendix-label-a-sample-of-points-from-each-cluster&#34;&gt;Appendix: label a sample of points from each cluster&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;label_df &amp;lt;- main_df %&amp;gt;%
  group_by(cluster) %&amp;gt;%
  sample_n(2)

main_df %&amp;gt;%
  ggplot(group = cluster) +
  geom_point(aes(x = buy, y = sell, color = cluster), size = 3) +
  geom_label_repel(aes(x = buy, y = sell, label = name), 
                   data = label_df,
                   nudge_x = -1000,
                   nudge_y = 10000) +
  coord_trans(x = &amp;quot;log10&amp;quot;) +
  labs(title = &amp;quot;Items in Animal Crossing&amp;quot;,
       subtitle = &amp;quot;Optimal Clustering&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;) +
  scale_x_continuous(name = &amp;quot;Buy Value&amp;quot;,
                     breaks = x_breaks,
                     labels = paste(x_breaks)) +
  scale_y_continuous(name = &amp;quot;Sell Value&amp;quot;,
                     breaks = y_breaks,
                     labels = paste(y_breaks)) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;2020-05-06-introduction-to-unsupervised-learning_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Supervised Learning</title>
      <link>/post/supervised-learning/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/supervised-learning/</guid>
      <description>&lt;div id=&#34;supervised-learning&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Supervised Learning&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised learning&lt;/strong&gt; has the goal of making predictions with a set of &lt;em&gt;known&lt;/em&gt; labels for the response variable.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;unsupervised learning&lt;/strong&gt;, we try to find structure in the data of the response variable without predetermined labels.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goal: predict the personality type of each character in Animal Crossing&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-set-animal-crossing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data set: Animal Crossing&lt;/h1&gt;
&lt;p&gt;Source: VillagerDB, MetaCritic, and TidyTuesday&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-05-05/readme.md&#34;&gt;Animal Crossing Tidy Tuesday&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;caret&amp;quot;)
library(&amp;quot;randomForest&amp;quot;)
library(&amp;quot;tidymodels&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)

# critic &amp;lt;- readr::read_tsv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/critic.tsv&amp;#39;)
# user_reviews &amp;lt;- readr::read_tsv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/user_reviews.tsv&amp;#39;)
# items &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/items.csv&amp;#39;)
villagers &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;exploratory-data-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(villagers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 391  11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(villagers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## tibble [391 x 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
##  $ row_n      : num [1:391] 2 3 4 6 7 8 9 10 11 13 ...
##  $ id         : chr [1:391] &amp;quot;admiral&amp;quot; &amp;quot;agent-s&amp;quot; &amp;quot;agnes&amp;quot; &amp;quot;al&amp;quot; ...
##  $ name       : chr [1:391] &amp;quot;Admiral&amp;quot; &amp;quot;Agent S&amp;quot; &amp;quot;Agnes&amp;quot; &amp;quot;Al&amp;quot; ...
##  $ gender     : chr [1:391] &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;female&amp;quot; &amp;quot;male&amp;quot; ...
##  $ species    : chr [1:391] &amp;quot;bird&amp;quot; &amp;quot;squirrel&amp;quot; &amp;quot;pig&amp;quot; &amp;quot;gorilla&amp;quot; ...
##  $ birthday   : chr [1:391] &amp;quot;1-27&amp;quot; &amp;quot;7-2&amp;quot; &amp;quot;4-21&amp;quot; &amp;quot;10-18&amp;quot; ...
##  $ personality: chr [1:391] &amp;quot;cranky&amp;quot; &amp;quot;peppy&amp;quot; &amp;quot;uchi&amp;quot; &amp;quot;lazy&amp;quot; ...
##  $ song       : chr [1:391] &amp;quot;Steep Hill&amp;quot; &amp;quot;DJ K.K.&amp;quot; &amp;quot;K.K. House&amp;quot; &amp;quot;Steep Hill&amp;quot; ...
##  $ phrase     : chr [1:391] &amp;quot;aye aye&amp;quot; &amp;quot;sidekick&amp;quot; &amp;quot;snuffle&amp;quot; &amp;quot;Ayyeeee&amp;quot; ...
##  $ full_id    : chr [1:391] &amp;quot;villager-admiral&amp;quot; &amp;quot;villager-agent-s&amp;quot; &amp;quot;villager-agnes&amp;quot; &amp;quot;villager-al&amp;quot; ...
##  $ url        : chr [1:391] &amp;quot;https://villagerdb.com/images/villagers/thumb/admiral.98206ee.png&amp;quot; &amp;quot;https://villagerdb.com/images/villagers/thumb/agent-s.96c789b.png&amp;quot; &amp;quot;https://villagerdb.com/images/villagers/thumb/agnes.9f51f32.png&amp;quot; &amp;quot;https://villagerdb.com/images/villagers/thumb/al.1e17090.png&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   row_n = col_double(),
##   ..   id = col_character(),
##   ..   name = col_character(),
##   ..   gender = col_character(),
##   ..   species = col_character(),
##   ..   birthday = col_character(),
##   ..   personality = col_character(),
##   ..   song = col_character(),
##   ..   phrase = col_character(),
##   ..   full_id = col_character(),
##   ..   url = col_character()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#table(villagers$name)
#length(unique(villagers$name))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(villagers$personality)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## cranky   jock   lazy normal  peppy   smug snooty   uchi 
##     55     55     60     59     49     34     55     24&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;personality-across-gender&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Personality across Gender&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers %&amp;gt;%
  ggplot(aes(x = personality, fill = gender)) +
  geom_bar(stat = &amp;quot;count&amp;quot;, position = &amp;quot;dodge&amp;quot;) +
  labs(title = &amp;quot;Getting to Know the Animal Crossing Villagers&amp;quot;,
       subtitle = &amp;quot;and judging their personalities&amp;quot;,
       caption = &amp;quot;Source: VillagerDB&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-supervised-learning_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;personality-across-species&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Personality across Species&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers %&amp;gt;%
  ggplot(aes(x = personality, fill = species)) +
  geom_bar(stat = &amp;quot;count&amp;quot;, position = &amp;quot;stack&amp;quot;) +
  labs(title = &amp;quot;Getting to Know the Animal Crossing Villagers&amp;quot;,
       subtitle = &amp;quot;and judging their personalities&amp;quot;,
       caption = &amp;quot;Source: VillagerDB&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-supervised-learning_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;predictor-variables&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predictor Variables&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(villagers$gender)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## female   male 
##    187    204&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(villagers$species)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## alligator  anteater      bear      bird      bull       cat   chicken       cow 
##         7         7        15        13         6        23         9         4 
##       cub      deer       dog      duck     eagle  elephant      frog      goat 
##        16        10        16        17         9        11        18         8 
##   gorilla   hamster     hippo     horse  kangaroo     koala      lion    monkey 
##         9         8         7        15         8         9         7         8 
##     mouse   octopus   ostrich   penguin       pig    rabbit     rhino     sheep 
##        15         3        10        13        15        20         6        13 
##  squirrel     tiger      wolf 
##        18         7        11&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;extracting-birth-month&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extracting Birth Month&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers &amp;lt;- villagers %&amp;gt;%
  separate(birthday, c(&amp;quot;birth_month&amp;quot;, &amp;quot;birth_day&amp;quot;), remove = FALSE)

villagers$birth_month_factor &amp;lt;- factor(villagers$birth_month, 
                                levels = 1:12)

table(villagers$birth_month_factor)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  1  2  3  4  5  6  7  8  9 10 11 12 
## 32 29 33 29 31 33 35 36 32 37 30 34&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers %&amp;gt;%
  ggplot(aes(x = personality, fill = birth_month_factor)) +
  geom_bar(color = &amp;quot;black&amp;quot;, stat = &amp;quot;count&amp;quot;, position = &amp;quot;stack&amp;quot;) +
  labs(title = &amp;quot;Getting to Know the Animal Crossing Villagers&amp;quot;,
       subtitle = &amp;quot;and judging their personalities&amp;quot;,
       caption = &amp;quot;Source: VillagerDB&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-supervised-learning_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers %&amp;gt;%
  ggplot(aes(x = personality, fill = birth_month_factor)) +
  geom_bar(color = &amp;quot;black&amp;quot;, stat = &amp;quot;count&amp;quot;, position = &amp;quot;fill&amp;quot;) +
  labs(title = &amp;quot;Getting to Know the Animal Crossing Villagers&amp;quot;,
       subtitle = &amp;quot;and judging their personalities&amp;quot;,
       caption = &amp;quot;Source: VillagerDB&amp;quot;,
       y = &amp;quot;proportion&amp;quot;) +
  scale_fill_manual(name = &amp;quot;Month of Birth&amp;quot;,
                    labels = c(&amp;quot;January&amp;quot;, &amp;quot;February&amp;quot;, &amp;quot;March&amp;quot;, &amp;quot;April&amp;quot;,
                                 &amp;quot;May&amp;quot;, &amp;quot;June&amp;quot;, &amp;quot;July&amp;quot;, &amp;quot;August&amp;quot;,
                                 &amp;quot;September&amp;quot;, &amp;quot;October&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;December&amp;quot;),
                    values=sample(c(&amp;quot;#4b48c9&amp;quot;, &amp;quot;#5c90a8&amp;quot;, &amp;quot;#86d5fe&amp;quot;, &amp;quot;#c0d1ef&amp;quot;,
                             &amp;quot;#edd1a2&amp;quot;, &amp;quot;#948572&amp;quot;, &amp;quot;#f8c79e&amp;quot;, &amp;quot;#eec688&amp;quot;,
                             &amp;quot;#642200&amp;quot;, &amp;quot;#764936&amp;quot;, &amp;quot;#fd974d&amp;quot;, &amp;quot;#7b4a3c&amp;quot;))) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-supervised-learning_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;(color palette generated at &lt;a href=&#34;http://www.cssdrive.com/imagepalette/index.php&#34;&gt;CSS Drive&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;model-formula&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;model formula&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;response variable: &lt;code&gt;personality&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;predictor variables: &lt;code&gt;gender&lt;/code&gt;, &lt;code&gt;species&lt;/code&gt;, &lt;code&gt;birth_month&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;model formula: &lt;code&gt;personality ~ gender + species + birth_month&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predictor_variables &amp;lt;- c(&amp;quot;gender&amp;quot;, &amp;quot;species&amp;quot;, &amp;quot;birth_month&amp;quot;)
model_formula &amp;lt;- paste(&amp;quot;personality~&amp;quot;, paste(sprintf(&amp;quot;`%s`&amp;quot;, predictor_variables), collapse=&amp;quot;+&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-split&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data Split&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;villagers_split &amp;lt;- initial_split(villagers)
villagers_train &amp;lt;- training(villagers_split)
villagers_test  &amp;lt;- testing(villagers_split)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;random-forests&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Random Forests&lt;/h1&gt;
&lt;p&gt;“Random forest models are ensembles of decision trees. A large number of decision tree models are created for the ensemble based on slightly different versions of the training set. When creating the individual decision trees, the fitting process encourages them to be as diverse as possible. The collection of trees are combined into the random forest model and, when a new sample is predicted, the votes from each tree are used to calculate the final predicted value for the new sample.”
—&lt;a href=&#34;https://www.tidymodels.org/start/resampling/&#34;&gt;tidymodels.org&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;define-the-forest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Define the Forest&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;random_forest_model &amp;lt;- 
  rand_forest(trees = 1000) %&amp;gt;% 
  set_engine(&amp;quot;ranger&amp;quot;) %&amp;gt;% 
  set_mode(&amp;quot;classification&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-the-forest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fitting the Forest&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# CAUTION: at the time of filming, this code chunk did not work (model formula parser threw an error)
random_forest_fit &amp;lt;-
  random_forest_model %&amp;gt;%
  fit(personality ~ gender + species + birth_month, data = villagers_train)

random_forest_fit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-forest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizing the Forest&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# OLD-FASHIONED WAY with the caret package
model_rf &amp;lt;- caret::train(personality ~ gender + species + birth_month,
                         data = villagers_train, method = &amp;quot;rf&amp;quot;)
model_rf&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Random Forest 
## 
## 294 samples
##   3 predictor
##   8 classes: &amp;#39;cranky&amp;#39;, &amp;#39;jock&amp;#39;, &amp;#39;lazy&amp;#39;, &amp;#39;normal&amp;#39;, &amp;#39;peppy&amp;#39;, &amp;#39;smug&amp;#39;, &amp;#39;snooty&amp;#39;, &amp;#39;uchi&amp;#39; 
## 
## No pre-processing
## Resampling: Bootstrapped (25 reps) 
## Summary of sample sizes: 294, 294, 294, 294, 294, 294, ... 
## Resampling results across tuning parameters:
## 
##   mtry  Accuracy   Kappa    
##    2    0.2550533  0.1357101
##   24    0.2889225  0.1759381
##   46    0.2892118  0.1774835
## 
## Accuracy was used to select the optimal model using the largest value.
## The final value used for the model was mtry = 46.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;model_rpart &amp;lt;- caret::train(personality ~ gender + species + birth_month,
                         data = villagers_train, method = &amp;quot;rpart&amp;quot;)
model_rpart&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## CART 
## 
## 294 samples
##   3 predictor
##   8 classes: &amp;#39;cranky&amp;#39;, &amp;#39;jock&amp;#39;, &amp;#39;lazy&amp;#39;, &amp;#39;normal&amp;#39;, &amp;#39;peppy&amp;#39;, &amp;#39;smug&amp;#39;, &amp;#39;snooty&amp;#39;, &amp;#39;uchi&amp;#39; 
## 
## No pre-processing
## Resampling: Bootstrapped (25 reps) 
## Summary of sample sizes: 294, 294, 294, 294, 294, 294, ... 
## Resampling results across tuning parameters:
## 
##   cp          Accuracy   Kappa     
##   0.02024291  0.2975188  0.18582216
##   0.02429150  0.2876263  0.17374970
##   0.19028340  0.2017836  0.07541971
## 
## Accuracy was used to select the optimal model using the largest value.
## The final value used for the model was cp = 0.02024291.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#source:  https://shiring.github.io/machine_learning/2017/03/16/rf_plot_ggraph

library(&amp;quot;ggraph&amp;quot;)
library(&amp;quot;igraph&amp;quot;)

tree_func &amp;lt;- function(final_model, 
                      tree_num) {
  
  # get tree by index
  tree &amp;lt;- randomForest::getTree(final_model, 
                                k = tree_num, 
                                labelVar = TRUE) %&amp;gt;%
    tibble::rownames_to_column() %&amp;gt;%
    # make leaf split points to NA, so the 0s won&amp;#39;t get plotted
    mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))
  
  # prepare data frame for graph
  graph_frame &amp;lt;- data.frame(from = rep(tree$rowname, 2),
                            to = c(tree$`left daughter`, tree$`right daughter`))
  
  # convert to graph and delete the last node that we don&amp;#39;t want to plot
  graph &amp;lt;- graph_from_data_frame(graph_frame) %&amp;gt;%
    delete_vertices(&amp;quot;0&amp;quot;)
  
  # set node labels
  V(graph)$node_label &amp;lt;- gsub(&amp;quot;_&amp;quot;, &amp;quot; &amp;quot;, as.character(tree$`split var`))
  V(graph)$leaf_label &amp;lt;- as.character(tree$prediction)
  V(graph)$split &amp;lt;- as.character(round(tree$`split point`, digits = 2))
  
  # plot
  plot &amp;lt;- ggraph(graph, &amp;#39;dendrogram&amp;#39;) + 
    theme_bw() +
    geom_edge_link() +
    geom_node_point() +
    geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +
    geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = &amp;quot;white&amp;quot;) +
    geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE, 
                    repel = TRUE, colour = &amp;quot;white&amp;quot;, fontface = &amp;quot;bold&amp;quot;, show.legend = FALSE) +
    theme(panel.grid.minor = element_blank(),
          panel.grid.major = element_blank(),
          panel.background = element_blank(),
          plot.background = element_rect(fill = &amp;quot;white&amp;quot;),
          panel.border = element_blank(),
          axis.line = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_blank(),
          axis.ticks = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          plot.title = element_text(size = 18))
  
  print(plot)
}

tree_num &amp;lt;- which(model_rf$finalModel$forest$ndbigtree == min(model_rf$finalModel$forest$ndbigtree))

tree_func(final_model = model_rf$finalModel, tree_num)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-supervised-learning_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;predictions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predictions&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;predictions &amp;lt;- predict(model_rf, newdata = villagers_test)
confusionMatrix(predictions, factor(villagers_test$personality))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Confusion Matrix and Statistics
## 
##           Reference
## Prediction cranky jock lazy normal peppy smug snooty uchi
##     cranky      5    1    0      0     0    1      0    0
##     jock        1   10    2      0     0    2      0    0
##     lazy        0    5   13      0     0    2      0    0
##     normal      0    0    0     12     1    0      1    2
##     peppy       0    0    0      2     9    0      3    0
##     smug        0    1    0      0     0    3      0    0
##     snooty      0    0    0      3     0    0     13    2
##     uchi        0    0    0      0     0    0      0    3
## 
## Overall Statistics
##                                           
##                Accuracy : 0.701           
##                  95% CI : (0.5996, 0.7898)
##     No Information Rate : 0.1753          
##     P-Value [Acc &amp;gt; NIR] : &amp;lt; 2.2e-16       
##                                           
##                   Kappa : 0.6502          
##                                           
##  Mcnemar&amp;#39;s Test P-Value : NA              
## 
## Statistics by Class:
## 
##                      Class: cranky Class: jock Class: lazy Class: normal
## Sensitivity                0.83333      0.5882      0.8667        0.7059
## Specificity                0.97802      0.9375      0.9146        0.9500
## Pos Pred Value             0.71429      0.6667      0.6500        0.7500
## Neg Pred Value             0.98889      0.9146      0.9740        0.9383
## Prevalence                 0.06186      0.1753      0.1546        0.1753
## Detection Rate             0.05155      0.1031      0.1340        0.1237
## Detection Prevalence       0.07216      0.1546      0.2062        0.1649
## Balanced Accuracy          0.90568      0.7629      0.8907        0.8279
##                      Class: peppy Class: smug Class: snooty Class: uchi
## Sensitivity               0.90000     0.37500        0.7647     0.42857
## Specificity               0.94253     0.98876        0.9375     1.00000
## Pos Pred Value            0.64286     0.75000        0.7222     1.00000
## Neg Pred Value            0.98795     0.94624        0.9494     0.95745
## Prevalence                0.10309     0.08247        0.1753     0.07216
## Detection Rate            0.09278     0.03093        0.1340     0.03093
## Detection Prevalence      0.14433     0.04124        0.1856     0.03093
## Balanced Accuracy         0.92126     0.68188        0.8511     0.71429&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Machine Learning</title>
      <link>/post/introduction-to-machine-learning/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-machine-learning/</guid>
      <description>&lt;div id=&#34;goals-for-today&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Goals for today&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;introduce machine learning (ideas and terminology)&lt;/li&gt;
&lt;li&gt;introduce &lt;code&gt;tidymodels&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;practice with a &lt;code&gt;TidyTuesday&lt;/code&gt; data set&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;tidymodels&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-tour-de-france&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data: Tour de France&lt;/h1&gt;
&lt;p&gt;Source: &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-04-07/readme.md&#34;&gt;TidyTuesday&lt;/a&gt; data set from April 7, 2020&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tdf_winners &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-07/tdf_winners.csv&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(tdf_winners)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;spec_tbl_df&amp;#39;, &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;: 106 obs. of  19 variables:
##  $ edition      : num  1 2 3 4 5 6 7 8 9 10 ...
##  $ start_date   : Date, format: &amp;quot;1903-07-01&amp;quot; &amp;quot;1904-07-02&amp;quot; ...
##  $ winner_name  : chr  &amp;quot;Maurice Garin&amp;quot; &amp;quot;Henri Cornet&amp;quot; &amp;quot;Louis Trousselier&amp;quot; &amp;quot;René Pottier&amp;quot; ...
##  $ winner_team  : chr  &amp;quot;La Française&amp;quot; &amp;quot;Conte&amp;quot; &amp;quot;Peugeot–Wolber&amp;quot; &amp;quot;Peugeot–Wolber&amp;quot; ...
##  $ distance     : num  2428 2428 2994 4637 4488 ...
##  $ time_overall : num  94.6 96.1 NA NA NA ...
##  $ time_margin  : num  2.99 2.27 NA NA NA ...
##  $ stage_wins   : num  3 1 5 5 2 5 6 4 2 3 ...
##  $ stages_led   : num  6 3 10 12 5 13 13 3 13 13 ...
##  $ height       : num  1.62 NA NA NA NA NA 1.78 NA NA NA ...
##  $ weight       : num  60 NA NA NA NA NA 88 NA NA NA ...
##  $ age          : num  32 19 24 27 24 25 22 22 26 23 ...
##  $ born         : Date, format: &amp;quot;1871-03-03&amp;quot; &amp;quot;1884-08-04&amp;quot; ...
##  $ died         : Date, format: &amp;quot;1957-02-19&amp;quot; &amp;quot;1941-03-18&amp;quot; ...
##  $ full_name    : chr  NA NA NA NA ...
##  $ nickname     : chr  &amp;quot;The Little Chimney-sweep&amp;quot; &amp;quot;Le rigolo (The joker)&amp;quot; &amp;quot;Levaloy / Trou-trou&amp;quot; NA ...
##  $ birth_town   : chr  &amp;quot;Arvier&amp;quot; &amp;quot;Desvres&amp;quot; &amp;quot;Paris&amp;quot; &amp;quot;Moret-sur-Loing&amp;quot; ...
##  $ birth_country: chr  &amp;quot;Italy&amp;quot; &amp;quot;France&amp;quot; &amp;quot;France&amp;quot; &amp;quot;France&amp;quot; ...
##  $ nationality  : chr  &amp;quot; France&amp;quot; &amp;quot; France&amp;quot; &amp;quot; France&amp;quot; &amp;quot; France&amp;quot; ...
##  - attr(*, &amp;quot;spec&amp;quot;)=
##   .. cols(
##   ..   edition = col_double(),
##   ..   start_date = col_date(format = &amp;quot;&amp;quot;),
##   ..   winner_name = col_character(),
##   ..   winner_team = col_character(),
##   ..   distance = col_double(),
##   ..   time_overall = col_double(),
##   ..   time_margin = col_double(),
##   ..   stage_wins = col_double(),
##   ..   stages_led = col_double(),
##   ..   height = col_double(),
##   ..   weight = col_double(),
##   ..   age = col_double(),
##   ..   born = col_date(format = &amp;quot;&amp;quot;),
##   ..   died = col_date(format = &amp;quot;&amp;quot;),
##   ..   full_name = col_character(),
##   ..   nickname = col_character(),
##   ..   birth_town = col_character(),
##   ..   birth_country = col_character(),
##   ..   nationality = col_character()
##   .. )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(tdf_winners)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;edition&amp;quot;       &amp;quot;start_date&amp;quot;    &amp;quot;winner_name&amp;quot;   &amp;quot;winner_team&amp;quot;  
##  [5] &amp;quot;distance&amp;quot;      &amp;quot;time_overall&amp;quot;  &amp;quot;time_margin&amp;quot;   &amp;quot;stage_wins&amp;quot;   
##  [9] &amp;quot;stages_led&amp;quot;    &amp;quot;height&amp;quot;        &amp;quot;weight&amp;quot;        &amp;quot;age&amp;quot;          
## [13] &amp;quot;born&amp;quot;          &amp;quot;died&amp;quot;          &amp;quot;full_name&amp;quot;     &amp;quot;nickname&amp;quot;     
## [17] &amp;quot;birth_town&amp;quot;    &amp;quot;birth_country&amp;quot; &amp;quot;nationality&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cleaning-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cleaning Data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tdf_winners %&amp;gt;%
  select(c(distance, time_overall, 
           height, weight, age)) %&amp;gt;%
  filter(complete.cases(.)) %&amp;gt;%
  filter(height &amp;gt;= 1.7) %&amp;gt;%
  mutate(pace = distance / time_overall) %&amp;gt;%
  select(c(pace, height, weight, age))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 62  4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-visualization&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data Visualization&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  ggplot(aes(x = height, y = pace)) +
  geom_point(color = &amp;quot;blue&amp;quot;) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, color = &amp;quot;red&amp;quot;) +
  labs(title = &amp;quot;Are taller bicyclists faster?&amp;quot;,
       subtitle = &amp;quot;featuring Tour de France winners&amp;quot;,
       caption = &amp;quot;Source: TidyTuesday&amp;quot;,
       x = &amp;quot;height (meters)&amp;quot;,
       y = &amp;quot;pace (km/hr)&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-01-introduction-to-machine-learning_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  ggplot(aes(x = age, y = pace)) +
  geom_point(color = &amp;quot;blue&amp;quot;) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, color = &amp;quot;red&amp;quot;) +
  labs(title = &amp;quot;Are older bicyclists faster?&amp;quot;,
       subtitle = &amp;quot;featuring Tour de France winners&amp;quot;,
       caption = &amp;quot;Source: TidyTuesday&amp;quot;,
       x = &amp;quot;age&amp;quot;,
       y = &amp;quot;pace (km/hr)&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-01-introduction-to-machine-learning_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df %&amp;gt;%
  ggplot(aes(x = weight, y = pace)) +
  geom_point(color = &amp;quot;blue&amp;quot;) +
  geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE, color = &amp;quot;red&amp;quot;) +
  labs(title = &amp;quot;Are heavier bicyclists faster?&amp;quot;,
       subtitle = &amp;quot;featuring Tour de France winners&amp;quot;,
       caption = &amp;quot;Source: TidyTuesday&amp;quot;,
       x = &amp;quot;weight (kg)&amp;quot;,
       y = &amp;quot;pace (km/hr)&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-01-introduction-to-machine-learning_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;first-model&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;First Model&lt;/h1&gt;
&lt;p&gt;“With tidymodels, we start by specifying the functional form of the model that we want using the &lt;code&gt;parsnip&lt;/code&gt; package.”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linear_reg()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear Regression Model Specification (regression)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;model-engine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;model engine&lt;/h2&gt;
&lt;p&gt;“However, now that the type of model has been specified, a method for fitting or training the model can be stated using the engine. The engine value is often a mash-up of the software that can be used to fit or train the model as well as the estimation method.”&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;linear_reg() %&amp;gt;% 
  set_engine(&amp;quot;lm&amp;quot;) #linear model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linear Regression Model Specification (regression)
## 
## Computational engine: lm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fitting-a-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;fitting a model&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_fit &amp;lt;- linear_reg() %&amp;gt;% 
  set_engine(&amp;quot;lm&amp;quot;) %&amp;gt;%
  fit(pace ~ height + weight + age, data = df)
lm_fit&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## parsnip model object
## 
## Fit time:  0ms 
## 
## Call:
## stats::lm(formula = formula, data = data)
## 
## Coefficients:
## (Intercept)       height       weight          age  
##      3.8455      21.0987      -0.1387       0.2113&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examining-a-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;examining a model&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(lm_fit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 5
##   term        estimate std.error statistic p.value
##   &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 (Intercept)    3.85    12.3        0.313  0.755 
## 2 height        21.1      8.06       2.62   0.0112
## 3 weight        -0.139    0.0685    -2.03   0.0474
## 4 age            0.211    0.0979     2.16   0.0350&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;interaction-terms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;interaction terms&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lm_fit_with_interaction &amp;lt;- linear_reg() %&amp;gt;% 
  set_engine(&amp;quot;lm&amp;quot;) %&amp;gt;%
  fit(pace ~ height + weight + age + height:weight + height:age + weight:age +
        height:weight:age,
      data = df)
lm_fit_with_interaction&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## parsnip model object
## 
## Fit time:  0ms 
## 
## Call:
## stats::lm(formula = formula, data = data)
## 
## Coefficients:
##       (Intercept)             height             weight                age  
##          924.8499          -444.1560           -15.6339           -27.8628  
##     height:weight         height:age         weight:age  height:weight:age  
##            7.9297            13.9352             0.4802            -0.2425&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tidy(lm_fit_with_interaction)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 5
##   term              estimate std.error statistic p.value
##   &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 (Intercept)        925.     2272.        0.407   0.686
## 2 height            -444.     1287.       -0.345   0.731
## 3 weight             -15.6      32.8      -0.477   0.635
## 4 age                -27.9      80.3      -0.347   0.730
## 5 height:weight        7.93     18.5       0.428   0.670
## 6 height:age          13.9      45.5       0.306   0.761
## 7 weight:age           0.480     1.16      0.414   0.680
## 8 height:weight:age   -0.243     0.656    -0.370   0.713&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;predictions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Predictions&lt;/h1&gt;
&lt;div id=&#34;new-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;new data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SpongeBob is a 26-year-old, 1.77 m tall bicyclist who weighs 55 kg&lt;/li&gt;
&lt;li&gt;Patrick is a 25-year-old, 1.81 m tall bicyclist who weighs 75 kg&lt;/li&gt;
&lt;li&gt;Squidward is a 31-year-old, 1.89 m tall bicyclist who weighs 65 kg&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new_contestants &amp;lt;- data.frame(name = c(&amp;quot;SpongeBob&amp;quot;, &amp;quot;Patrick&amp;quot;, &amp;quot;Squidward&amp;quot;),
                              age = c(26, 25, 31),
                              height = c(1.77, 1.81, 1.89),
                              weight = c(55, 75, 65))

mean_predictions &amp;lt;- predict(lm_fit, new_data = new_contestants)
mean_predictions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   .pred
##   &amp;lt;dbl&amp;gt;
## 1  39.1
## 2  36.9
## 3  41.3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;confidence-intervals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;confidence intervals&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CI_predictions &amp;lt;- predict(lm_fit,
                          new_data = new_contestants,
                          type = &amp;quot;conf_int&amp;quot;)
CI_predictions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   .pred_lower .pred_upper
##         &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1        37.1        41.0
## 2        35.9        38.0
## 3        39.0        43.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;error-bars&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;error bars&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_df &amp;lt;- new_contestants %&amp;gt;%
  bind_cols(mean_predictions) %&amp;gt;%
  bind_cols(CI_predictions)
plot_df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        name age height weight    .pred .pred_lower .pred_upper
## 1 SpongeBob  26   1.77     55 39.05386    37.07966    41.02807
## 2   Patrick  25   1.81     75 36.91179    35.85758    37.96601
## 3 Squidward  31   1.89     65 41.25491    38.97189    43.53794&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_df %&amp;gt;%
  ggplot(aes(x = name)) +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                color = &amp;quot;red&amp;quot;,
                width = 0.32) +
  geom_point(aes(y = .pred), color = &amp;quot;blue&amp;quot;, size = 5) +
  labs(title = &amp;quot;Tour de Under the Sea&amp;quot;,
       subtitle = &amp;quot;Welcome the new contestants!&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;pace (km/hr)&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-01-introduction-to-machine-learning_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-splitting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data Splitting&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“The &lt;em&gt;training set&lt;/em&gt; is used to estimate parameters, compare models and feature engineering techniques, tune models, etc.”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“The &lt;em&gt;test set&lt;/em&gt; is held in reserve until the end of the project, at which point there should only be one or two models under serious consideration. It is used as an unbiased source for measuring final model performance.”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_split &amp;lt;- initial_split(df)
train_df &amp;lt;- training(data_split)
test_df &amp;lt;- testing(data_split)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;quot;The number of observations in the training set is:&amp;quot;, nrow(train_df)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The number of observations in the training set is: 47&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(paste(&amp;quot;The number of observations in the testing set is:&amp;quot;, nrow(test_df)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The number of observations in the testing set is: 15&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-the-split&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;visualizing the split&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_split &amp;lt;- initial_split(df)
train_df &amp;lt;- training(data_split)
test_df &amp;lt;- testing(data_split)

train_df %&amp;gt;%
  ggplot(aes(x = height, y = pace)) +
  geom_point(aes(color = &amp;quot;training set&amp;quot;), 
             # color = &amp;quot;black&amp;quot;
             ) +
  geom_smooth(method = &amp;quot;lm&amp;quot;,
              aes(x = height, y = pace),
              color = &amp;quot;black&amp;quot;,
              data = train_df,
               se = FALSE) +
  geom_point(aes(x = height, y = pace, color = &amp;quot;testing set&amp;quot;),
             # color = &amp;quot;red&amp;quot;,
             data = test_df,
             size = 3) +
  labs(title = &amp;quot;Training and Testing Sets&amp;quot;,
       subtitle = &amp;quot;approx 75-25 percent split&amp;quot;,
       caption = &amp;quot;Math 32&amp;quot;,
       x = &amp;quot;height (meters)&amp;quot;,
       y = &amp;quot;pace (km/hr)&amp;quot;) +
  scale_color_manual(name = &amp;quot;Data Split&amp;quot;,
                     breaks = c(&amp;quot;training set&amp;quot;, &amp;quot;testing set&amp;quot;),
                     values = c(&amp;quot;training set&amp;quot; = &amp;quot;black&amp;quot;,
                                &amp;quot;testing set&amp;quot; = &amp;quot;red&amp;quot;)) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-01-introduction-to-machine-learning_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tip: run the last code block several times (keyboard shortcut: CTRL-SHFT-ENTER) for the full effect!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Bioconductor</title>
      <link>/post/introduction-to-bioconductor/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-bioconductor/</guid>
      <description>&lt;p&gt;“&lt;a href=&#34;https://www.bioconductor.org/&#34;&gt;Bioconductor&lt;/a&gt; provides tools for the analysis and comprehension of high-throughput genomic data. Bioconductor uses the R statistical programming language, and is open source and open development.”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bioconductor.org/&#34;&gt;https://www.bioconductor.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;dplyr&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;To install core packages, type the following in an R command window.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may take around 5 minutes&lt;/li&gt;
&lt;li&gt;When the option for updating packages appears, type in “a” for “all”&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#leave as eval = FALSE when knitting

if (!requireNamespace(&amp;quot;BiocManager&amp;quot;, quietly = TRUE))
    install.packages(&amp;quot;BiocManager&amp;quot;)
BiocManager::install()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;installing-bioconductor-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing Bioconductor packages&lt;/h2&gt;
&lt;p&gt;There are about 20000 packages in the &lt;em&gt;Bioconductor&lt;/em&gt; universe. For now, let us install a couple of the more popular packages with the following code. To install a &lt;code&gt;BioConductor&lt;/code&gt; package, simply type in the name of the package in quotes inside of &lt;code&gt;BiocManager::install()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may take around 5 minutes&lt;/li&gt;
&lt;li&gt;Hereafter, when the option for updating packages appears, type in “n” for “no”&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#leave as eval = FALSE when knitting

BiocManager::install(&amp;quot;GenomicFeatures&amp;quot;)
BiocManager::install(&amp;quot;Biostrings&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-genomicfeatures&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploring GenomicFeatures&lt;/h1&gt;
&lt;p&gt;The following instructions were extracted from the vignette for Genomic Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browseVignettes(package = &#34;GenomicFeatures&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load the &lt;code&gt;GenomicFeatures&lt;/code&gt; package. It is suggested that you load the packages with the following code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

suppressPackageStartupMessages(library(&amp;#39;GenomicFeatures&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;“The &lt;code&gt;GenomicFeatures&lt;/code&gt; package retrieves and manages transcript-related features fromthe UCSC Genome Bioinformatics and BioMart data resources. The package isuseful for ChIP-chip, ChIP-seq, and RNA-seq analyses.”&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;txdb-objects&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;TxDb Objects&lt;/h2&gt;
&lt;p&gt;&#34;The &lt;code&gt;GenomicFeatures&lt;/code&gt; package uses TxDb objects to store transcript metadata. This class maps the 5’ and 3’ untranslated regions (UTRs), protein coding sequences(CDSs) and exons for a set of mRNA transcripts to their associated genome. TxDb objects have numerous accessors functions to allow such features to be retrieved individually or grouped together in a way that reflects the underlying biology.&lt;/p&gt;
&lt;p&gt;All TxDb objects are backed by a SQLite database that manages genomic locations and the relationships between pre-processed mRNA transcripts, exons, protein coding sequences, and their related gene identifiers.&#34;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

samplefile &amp;lt;- system.file(&amp;quot;extdata&amp;quot;,
                          &amp;quot;hg19_knownGene_sample.sqlite&amp;quot;,
                          package=&amp;quot;GenomicFeatures&amp;quot;)
txdb &amp;lt;- loadDb(samplefile)
txdb&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Write a couple of sentences about what you observe in the output (the description of the txdb sample file)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-and-viewing-a-sequence&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading and Viewing a Sequence&lt;/h2&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Install the following packages (i.e. figure out how from some code earlier in this tutorial)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BSgenome.Hsapiens.UCSC.hg19&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TxDb.Hsapiens.UCSC.hg19.knownGene&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Run the following code and then write a couple of sentences about what you observe in the output.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)

tx_seqs1 &amp;lt;- extractTranscriptSeqs(Hsapiens,
                                  TxDb.Hsapiens.UCSC.hg19.knownGene,
                                  use.names=TRUE)
suppressWarnings(translate(tx_seqs1))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exploring-biostrings&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exploring Biostrings&lt;/h1&gt;
&lt;p&gt;The following instructions were extracted from the vignette for &lt;code&gt;Biostrings&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;browseVignettes(package = &#34;Biostrings&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Install the following packages (i.e. figure out how from some code earlier in this tutorial)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hgu95av2probe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hgu95av2cdf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load the &lt;code&gt;Biostrings&lt;/code&gt; package. It is suggested that you load the packages with the following code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

suppressPackageStartupMessages(library(&amp;#39;Biostrings&amp;#39;))
suppressPackageStartupMessages(library(&amp;#39;hgu95av2probe&amp;#39;))
suppressPackageStartupMessages(library(&amp;#39;hgu95av2cdf&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The following code will load an example of a “Large DNAStringSet” and perform a couple of simple data analyses. Run the code and write a couple of sentences about the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

this_DNAString_set &amp;lt;- DNAStringSet(hgu95av2probe)
this_DNAString_set_bc &amp;lt;- alphabetFrequency(this_DNAString_set, baseOnly = TRUE)
nrow(this_DNAString_set_bc)
head(this_DNAString_set_bc)
alphabetFrequency(this_DNAString_set_bc, baseOnly=TRUE, collapse=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The following code will perform a calculation called the &lt;code&gt;GC content&lt;/code&gt; of a DNA sequence and graph the resulting amounts as a histogram. Run the code and write a couple of sentences about the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set as eval = TRUE when knitting

this_DNAString_df &amp;lt;- data.frame(this_DNAString_set_bc)

# alas &amp;quot;T&amp;quot; is treated as &amp;quot;TRUE&amp;quot; in R, so let&amp;#39;s use the full names of the nucleotides
colnames(this_DNAString_df) &amp;lt;- c(&amp;quot;Adenine&amp;quot;, &amp;quot;Cytosine&amp;quot;, &amp;quot;Guanine&amp;quot;, &amp;quot;Thymine&amp;quot;, &amp;quot;other&amp;quot;)

this_DNAString_df %&amp;gt;%
  select(c(&amp;quot;Adenine&amp;quot;, &amp;quot;Cytosine&amp;quot;, &amp;quot;Guanine&amp;quot;, &amp;quot;Thymine&amp;quot;)) %&amp;gt;%
  mutate(GC_content = 100*(Cytosine + Guanine) / 
           (Adenine + Cytosine + Guanine + Thymine)) %&amp;gt;%
  ggplot(aes(x = GC_content, fill = ..x..)) +
  geom_histogram(binwidth = 5) + 
  labs(title = &amp;quot;Affymetrix Human Genome U95 Set annotation data&amp;quot;,
       subtitle = &amp;quot;GC Content of hgu95av2probe&amp;quot;,
       caption = &amp;quot;Source: Bioconductor&amp;quot;,
       x = &amp;quot;GC content (percentage)&amp;quot;) +
  scale_fill_gradient(low = &amp;quot;yellow&amp;quot;, high= &amp;quot;blue&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Troubleshooting for R, RStudio, and Tidyverse installation</title>
      <link>/post/r-troubleshooting-for-students/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/r-troubleshooting-for-students/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-doesnt-my-r-look-like-your-r-software&#34;&gt;Why doesn’t my R look like your R [software]?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rstudio-says-that-it-cannot-find-the-r-binaries.&#34;&gt;RStudio says that it cannot find the R binaries.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#we-cannot-install-software-on-ipad-chromebook-etc.&#34;&gt;We cannot install software (on iPad, Chromebook, etc.)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidyverse-cannot-be-found&#34;&gt;tidyverse cannot be found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-is-not-available-for-r-version&#34;&gt;[package] is not available for R version …&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#there-is-no-package-rlang&#34;&gt;there is no package ‘rlang’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#there-is-no-package-broom&#34;&gt;there is no package ‘broom’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rlang-andor-broom-still-do-not-work&#34;&gt;rlang and/or broom still do not work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-do-we-know-which-is-the-rmd-file-and-which-is-the-html-file&#34;&gt;How do we know which is the RMD file and which is the HTML file?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In this site, I hope to address most of the issues that appear when we try to install &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;RStudio&lt;/code&gt;, and &lt;code&gt;tidyverse&lt;/code&gt; in the classroom setting.&lt;/p&gt;
&lt;div id=&#34;why-doesnt-my-r-look-like-your-r-software&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why doesn’t my R look like your R [software]?&lt;/h1&gt;
&lt;p&gt;There are two programs to install: &lt;code&gt;R&lt;/code&gt;, then &lt;code&gt;RStudio&lt;/code&gt;. Please follow the installation instructions at &lt;a href=&#34;https://dsollberger.netlify.com/post/r-installation-for-students/&#34; class=&#34;uri&#34;&gt;https://dsollberger.netlify.com/post/r-installation-for-students/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-says-that-it-cannot-find-the-r-binaries.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;RStudio says that it cannot find the R binaries.&lt;/h1&gt;
&lt;p&gt;There are two programs to install: &lt;code&gt;R&lt;/code&gt;, then &lt;code&gt;RStudio&lt;/code&gt;. Please follow the installation instructions at &lt;a href=&#34;https://dsollberger.netlify.com/post/r-installation-for-students/&#34; class=&#34;uri&#34;&gt;https://dsollberger.netlify.com/post/r-installation-for-students/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;we-cannot-install-software-on-ipad-chromebook-etc.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;We cannot install software (on iPad, Chromebook, etc.)&lt;/h1&gt;
&lt;p&gt;There is a fantastic alternative at &lt;a href=&#34;https://rstudio.cloud/&#34;&gt;RStudio Cloud&lt;/a&gt;. That is, one can do their R programming online. There will be a few more steps involved compared to what we do in &lt;code&gt;RStudio&lt;/code&gt; Desktop, but past students have gotten &lt;code&gt;RStudio Cloud&lt;/code&gt; to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidyverse-cannot-be-found&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;tidyverse cannot be found&lt;/h1&gt;
&lt;p&gt;We need to install code packages before using code packages. Run &lt;code&gt;install.packages(&#34;tidyverse&#34;)&lt;/code&gt; in the console (lower-left area). The installation will take up to 5 minutes. This has to be done only once during the semester.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-is-not-available-for-r-version&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;[package] is not available for R version …&lt;/h1&gt;
&lt;p&gt;To ensure compatibility between &lt;code&gt;R&lt;/code&gt; and code packages, the R community almost always asks users to use the newest version of &lt;code&gt;R&lt;/code&gt;. Please install the newest versions of &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;RStudio&lt;/code&gt;. This semester we are using &lt;code&gt;R&lt;/code&gt; version 3.6.2 and &lt;code&gt;RStudio&lt;/code&gt; version 1.2.5033.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;there-is-no-package-rlang&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;there is no package ‘rlang’&lt;/h1&gt;
&lt;p&gt;Run this command in the console&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install.packages(&#34;dplyr&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a choice appears that says something like &lt;code&gt;Do you want to install from sources the package which needs compilation?.&lt;/code&gt;, select “No”.&lt;/p&gt;
&lt;p&gt;Alternatively: &lt;a href=&#34;https://stackoverflow.com/questions/49721356/trouble-downloading-rlang-with-tidyverse&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/49721356/trouble-downloading-rlang-with-tidyverse&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;there-is-no-package-broom&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;there is no package ‘broom’&lt;/h1&gt;
&lt;p&gt;The explanation would be a deep dive into the notion of &lt;em&gt;dependencies&lt;/em&gt; (beyond the scope of the course). For now, we dive right into this case’s dependencies. Run these commands in the console.&lt;/p&gt;
&lt;p&gt;If a choice appears that says something like &lt;code&gt;Do you want to install from sources the package which needs compilation?.&lt;/code&gt;, select “No”.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;install.packages(&#34;backports&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then &lt;code&gt;install.packages(&#34;zeallot&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then &lt;code&gt;install.packages(&#34;broom&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;then &lt;code&gt;install.packages(&#34;tidyverse&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com/t/fail-to-install-package-broom/11307/3&#34; class=&#34;uri&#34;&gt;https://community.rstudio.com/t/fail-to-install-package-broom/11307/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.rstudio.com/t/error-lazy-loading-failed-for-package-broom/50777&#34; class=&#34;uri&#34;&gt;https://community.rstudio.com/t/error-lazy-loading-failed-for-package-broom/50777&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;rlang-andor-broom-still-do-not-work&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;rlang and/or broom still do not work&lt;/h1&gt;
&lt;p&gt;Let’s try this. &lt;code&gt;tidyverse&lt;/code&gt; is a &lt;em&gt;set&lt;/em&gt; of packages that are supposed to work together well and emulate programming practices from other programming languages. In our introductory forays into &lt;code&gt;R&lt;/code&gt; programming, we do not need every package in the &lt;code&gt;tidyverse&lt;/code&gt;. Therefore, the simplest work-around is to load the needed packages individually.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#### instead of library(&amp;quot;tidyverse&amp;quot;) ####
library(&amp;quot;dplyr&amp;quot;)    #for the pipe function %&amp;gt;% and other SQL commands
library(&amp;quot;ggplot2&amp;quot;)  #modern data visualization
#library(&amp;quot;readr&amp;quot;)    #to load CSV data files
#library(&amp;quot;readxl&amp;quot;)   #to load Excel data files
#library(&amp;quot;stringr&amp;quot;)  #manipulate strings and regular expressions
#library(&amp;quot;tidyr&amp;quot;)    #to reshape data frames with functions like gather or spread&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;how-do-we-know-which-is-the-rmd-file-and-which-is-the-html-file&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;How do we know which is the RMD file and which is the HTML file?&lt;/h1&gt;
&lt;p&gt;It will be useful if you can see file types in your computer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instructions for &lt;a href=&#34;http://kb.winzip.com/kb/entry/26/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;instructions for &lt;a href=&#34;https://www.idownloadblog.com/2014/10/29/how-to-show-or-hide-filename-extensions-in-os-x-yosemite/&#34;&gt;Mac OS X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, the HTML file will probably have a similar icon as your web browser (Chrome, Firefox, etc.)&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R Installation</title>
      <link>/post/r-installation-for-students/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/r-installation-for-students/</guid>
      <description>&lt;p&gt;If you are planning to do the &lt;code&gt;R&lt;/code&gt; assignments on your own computer (recommended), then here is a quick outline for obtaining the software.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;There are two separate software programs&lt;/em&gt;. Most people find it easier to use &lt;code&gt;RStudio&lt;/code&gt;. than just &lt;code&gt;R&lt;/code&gt;, but you need to install &lt;code&gt;R&lt;/code&gt; first before installing &lt;code&gt;RStudio&lt;/code&gt; (analogously speaking: you need an cell phone before you can use an cell phone case).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If you have R and RStudio from a previous course, you still need to update to the current versions!&lt;/em&gt; (version 3.6.2 of R and version 1.2.5033 of RStudio)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;downloading-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Downloading R&lt;/h1&gt;
&lt;p&gt;Go to &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;The Comprehensive R Archive Network&lt;/a&gt; (CRAN)&lt;/p&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;click “Download R for Windows”&lt;/li&gt;
&lt;li&gt;click “install R for the first time”&lt;/li&gt;
&lt;li&gt;click “Download R 3.6.2 for Windows”&lt;/li&gt;
&lt;li&gt;click “Save File”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mac:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;click “Download R for (Mac) OS X”&lt;/li&gt;
&lt;li&gt;click “R-3.6.2.pkg”&lt;/li&gt;
&lt;li&gt;click “Ok”&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-r&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installing R&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Windows: double-check icon for R-3.6.2-win.exe&lt;/li&gt;
&lt;li&gt;Mac: double-click icon for R-3.6.2.pkg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the rest of these steps, it is okay to accept the default selections (but I will outline them here for posterity):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give computer permission to install&lt;/li&gt;
&lt;li&gt;select language&lt;/li&gt;
&lt;li&gt;agree to GNU General Public License&lt;/li&gt;
&lt;li&gt;select destination location&lt;/li&gt;
&lt;li&gt;select components&lt;/li&gt;
&lt;li&gt;Startup options: select “No (accept defaults)”&lt;/li&gt;
&lt;li&gt;select Start Menu Folder&lt;/li&gt;
&lt;li&gt;select Additional Tasks&lt;/li&gt;
&lt;li&gt;(wait a minute or two for installation to take place)&lt;/li&gt;
&lt;li&gt;“Click Finish to exit Setup”&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;downloading-rstudio&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Downloading RStudio&lt;/h1&gt;
&lt;p&gt;Go to the &lt;a href=&#34;https://rstudio.com/products/rstudio/download/#download&#34;&gt;RStudio Desktop download page&lt;/a&gt; (i.e. we are using the &lt;em&gt;free&lt;/em&gt;, desktop version of RStudio)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows: click RStudio-1.2.5033.exe, click “Save File”&lt;/li&gt;
&lt;li&gt;Mac: click RStudio-1.2.5033.dmg, click “Ok”&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-rstudio&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installing RStudio&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Windows: double-check icon for RStudio-1.2.5033.exe&lt;/li&gt;
&lt;li&gt;Mac: double-click icon for RStudio-1.2.5033.dmg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the rest of these steps, it is okay to accept the default selections (but I will outline them here for posterity):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give computer permission to install&lt;/li&gt;
&lt;li&gt;“Click Next to continue”&lt;/li&gt;
&lt;li&gt;Choose Install Location&lt;/li&gt;
&lt;li&gt;Choose Start Menu Folder&lt;/li&gt;
&lt;li&gt;(wait a minute or two for installation to take place)&lt;/li&gt;
&lt;li&gt;“Click Finish to close Setup”&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;code-packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Code Packages&lt;/h1&gt;
&lt;p&gt;For R coding, we will often need more code—called code packages. To ease our coding sessions, please run the following lines of code before class (in the lower-left &lt;code&gt;console&lt;/code&gt; area of RStudio, just has to be done once this semester).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;package_list &amp;lt;- c(&amp;quot;tidyverse&amp;quot;, &amp;quot;readxl&amp;quot;, &amp;quot;mosaic&amp;quot;, &amp;quot;titanic&amp;quot;)
install.packages(package_list)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;file-types&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;File Types&lt;/h1&gt;
&lt;p&gt;Also, while we are learning how I want homework assignments to be submitted, it will be useful if you can see file types in your computer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instructions for &lt;a href=&#34;http://kb.winzip.com/kb/entry/26/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;instructions for &lt;a href=&#34;https://www.idownloadblog.com/2014/10/29/how-to-show-or-hide-filename-extensions-in-os-x-yosemite/&#34;&gt;Mac OS X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Duolingo Leagues</title>
      <link>/post/duolingo-leagues/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/duolingo-leagues/</guid>
      <description>&lt;p&gt;&lt;code&gt;Duolingo&lt;/code&gt;, the language learning app, places users in groups of 50 and assigns a &lt;code&gt;league&lt;/code&gt; to each user to encourage competition. The leagues are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bronze, Silver, Gold, Sapphire, Ruby, Emerald, Amethyst, Pearl, Obsidian, and Diamond (in that increasing order)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;what-proportion-of-duolingo-users-are-in-each-league&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What proportion of Duolingo users are in each league?&lt;/h1&gt;
&lt;p&gt;The rules are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;everyone starts in the Bronze League&lt;/li&gt;
&lt;li&gt;the top 15 percent of each group gets promoted to the next league up (measured weekly)&lt;/li&gt;
&lt;li&gt;the bottom 10 percent of each group is related downward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I will try out some stochastic processes calculations to answer that question.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;leagues &amp;lt;- c(&amp;quot;Bronze&amp;quot;, &amp;quot;Silver&amp;quot;, &amp;quot;Gold&amp;quot;, &amp;quot;Sapphire&amp;quot;, &amp;quot;Ruby&amp;quot;,
             &amp;quot;Emerald&amp;quot;, &amp;quot;Amethyst&amp;quot;, &amp;quot;Pearl&amp;quot;, &amp;quot;Obsidian&amp;quot;, &amp;quot;Diamond&amp;quot;)

transition_matrix &amp;lt;- matrix( rep(0, 100), 10)

# trying shortcuts
diag(transition_matrix[-10,-1]) &amp;lt;- 15 #top 15 percent of each group gets promoted
diag(transition_matrix[-1,-10]) &amp;lt;- 10 #bottom 10 percent of each group is relegated
diag(transition_matrix)         &amp;lt;- 75 #the rest stay where they are

# fix the corners
transition_matrix[1,1]    &amp;lt;- 85
transition_matrix[10, 10] &amp;lt;- 85

# make row-stochastic (i.e. so each row adds up to one)
transition_matrix &amp;lt;- transition_matrix/100

# R allows user to label rows and columns
rownames(transition_matrix) &amp;lt;- leagues
colnames(transition_matrix) &amp;lt;- leagues

print(transition_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          Bronze Silver Gold Sapphire Ruby Emerald Amethyst Pearl Obsidian
## Bronze     0.85   0.15 0.00     0.00 0.00    0.00     0.00  0.00     0.00
## Silver     0.10   0.75 0.15     0.00 0.00    0.00     0.00  0.00     0.00
## Gold       0.00   0.10 0.75     0.15 0.00    0.00     0.00  0.00     0.00
## Sapphire   0.00   0.00 0.10     0.75 0.15    0.00     0.00  0.00     0.00
## Ruby       0.00   0.00 0.00     0.10 0.75    0.15     0.00  0.00     0.00
## Emerald    0.00   0.00 0.00     0.00 0.10    0.75     0.15  0.00     0.00
## Amethyst   0.00   0.00 0.00     0.00 0.00    0.10     0.75  0.15     0.00
## Pearl      0.00   0.00 0.00     0.00 0.00    0.00     0.10  0.75     0.15
## Obsidian   0.00   0.00 0.00     0.00 0.00    0.00     0.00  0.10     0.75
## Diamond    0.00   0.00 0.00     0.00 0.00    0.00     0.00  0.00     0.10
##          Diamond
## Bronze      0.00
## Silver      0.00
## Gold        0.00
## Sapphire    0.00
## Ruby        0.00
## Emerald     0.00
## Amethyst    0.00
## Pearl       0.00
## Obsidian    0.15
## Diamond     0.85&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Knowing some about stochastic processes, we can either implement an initial distribution and employ matrix-vector multiplication over many iterations, or we can find an eigenvector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;findStatDist &amp;lt;- function(P){
  # This function will compute the stationary distribution for a transition matrix
  # Input: row-stochastic matrix P
  # Output: row vector pi_vec
  
  # obtain left-eigenvector for lambda = 1
  x &amp;lt;- eigen(t(P))$vectors[,1] 
  
  # normalize the eigenvector in the one-norm
  pi_vec &amp;lt;- x / sum(x)
  pi_vec #return this vector
}

answer &amp;lt;- as.data.frame(round(100*findStatDist(transition_matrix)))

# R allows user to label rows and columns
rownames(answer) &amp;lt;- leagues
colnames(answer) &amp;lt;- &amp;quot;percentage&amp;quot;

print(answer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          percentage
## Bronze            3
## Silver            4
## Gold              5
## Sapphire          7
## Ruby              9
## Emerald          11
## Amethyst         13
## Pearl            15
## Obsidian         16
## Diamond          17&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hikes I&#39;ve Completed</title>
      <link>/post/hikes-i-ve-completed/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/hikes-i-ve-completed/</guid>
      <description>&lt;p&gt;Here I will plot some of the hikes I have done as elevation (from sea level) versus distance. I was inspired by &lt;a href=&#34;https://www.reddit.com/r/dataisbeautiful/comments/bwm184/my_first_attempt_at_data_visualization_hikes_ive/&#34;&gt;this Reddit post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today’s code was great practice with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geom_segment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geom_label_repel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and using &lt;code&gt;xlim&lt;/code&gt; and &lt;code&gt;ylim&lt;/code&gt; to expand the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggrepel)
library(tidyverse)
library(readxl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_info &amp;lt;- read_excel(&amp;quot;hikes.xlsx&amp;quot;, sheet = &amp;quot;info&amp;quot;)
df_info %&amp;gt;% print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 6
##   Region    trail                distance trailhead elevation  peak
##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 Tahoe     Mt Tallac                 5.1      6445      3290  9735
## 2 Tahoe     Flume                     6.4      6980      1420  8400
## 3 Tahoe     Mt Rose                   5.4      8388      2388 10776
## 4 Tahoe     Relay Peak                4.7      8388      1515  9903
## 5 Tahoe     Donner Peak               1.9      6175       882  7057
## 6 Yosemite  Four-Mile                 4.7      4000      3200  7200
## 7 Yosemite  Nevada Falls              4.4      4000      2191  6191
## 8 Yosemite  Upper Yosemite Falls      3.6      4000      3175  7175
## 9 Mt Diablo Waterfall                 4         374      1709  2083&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_info %&amp;gt;%
  mutate(start = 0) %&amp;gt;% #the first x-value for each line segment
  ggplot() +
  geom_segment(aes(x = start, y = trailhead, 
                   xend = distance, yend = peak, 
                   color = Region)) +
  geom_label_repel(aes(x = distance, y = peak, 
                       color = Region,
                       label = trail),
                   box.padding = 1,
                   segment.color = &amp;quot;grey50&amp;quot;,
                   segment.size = 0.5) +
  geom_point(aes(x = distance, y = peak, color = Region), size = 5) +
  labs(title = &amp;quot;Hikes I&amp;#39;ve Completed&amp;quot;,
       subtitle = &amp;quot;Derek Sollberger&amp;quot;,
       caption = &amp;quot;2010 to 2019&amp;quot;,
       x = &amp;quot;One-Way Distance (in miles)&amp;quot;,
       y = &amp;quot;Elevation (in feet)&amp;quot;) +
  theme_minimal() +
  xlim(0,8) +
  ylim(0, 15000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-11-hikes-i-ve-completed_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gender of Frasier Characters</title>
      <link>/post/gender-of-frasier-characters/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/gender-of-frasier-characters/</guid>
      <description>&lt;p&gt;“I am not a man…”&lt;/p&gt;
&lt;p&gt;For work, I need to take a list of names and try to infer the gender. Here I try an R package on the character names in the TV show &lt;em&gt;Fraiser&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;the-gender-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The gender package&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#install.packages(&amp;quot;gender&amp;quot;) #works fine

## user needs to download database too
#install_genderdata_package() #did not work (&amp;quot;error reading from connection&amp;quot;)

## as suggested by the bug report at https://github.com/ropensci/drat/issues/6
#install.packages(&amp;quot;devtools&amp;quot;)
#library(devtools)
#devtools::install_github(&amp;quot;ropensci/genderdata&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;trial-run&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Trial Run&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gender)
library(ggpubr)
library(tidyverse)

gender(&amp;quot;frasier&amp;quot;, method = &amp;quot;ssa&amp;quot;, years = c(1940, 1990))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   name    proportion_male proportion_female gender year_min year_max
##   &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
## 1 frasier               1                 0 male       1940     1990&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;cast-of-characters&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Cast of Characters&lt;/h1&gt;
&lt;p&gt;Now I will try to run the &lt;code&gt;gender&lt;/code&gt; function over a list of names (criteria: characters that appeared in at least 6 episodes).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#making a data frame of characters (i.e. the TV show characters)
name &amp;lt;- c(&amp;quot;frasier&amp;quot;, &amp;quot;daphne&amp;quot;, &amp;quot;niles&amp;quot;, &amp;quot;roz&amp;quot;, &amp;quot;martin&amp;quot;, 
          &amp;quot;eddie&amp;quot;, &amp;quot;bulldog&amp;quot;, &amp;quot;kenny&amp;quot;, &amp;quot;gil&amp;quot;, &amp;quot;noel&amp;quot;, 
          &amp;quot;gertrude&amp;quot;, &amp;quot;donny&amp;quot;, &amp;quot;lilith&amp;quot;, &amp;quot;bebe&amp;quot;, &amp;quot;mel&amp;quot;,
          &amp;quot;ronee&amp;quot;, &amp;quot;alice&amp;quot;, &amp;quot;julia&amp;quot;, &amp;quot;frederick&amp;quot;, &amp;quot;simon&amp;quot;,
          &amp;quot;lana&amp;quot;, &amp;quot;sherry&amp;quot;, &amp;quot;kirby&amp;quot;, &amp;quot;charlotte&amp;quot;)
start_year &amp;lt;- 1940
end_year &amp;lt;- 1990
df &amp;lt;- data.frame(name, start_year, end_year, stringsAsFactors=FALSE)
main_cast &amp;lt;- df %&amp;gt;% slice(1:5)

gender_df(df, method = &amp;quot;ssa&amp;quot;, name_col = &amp;quot;name&amp;quot;, year_col = c(&amp;quot;start_year&amp;quot;, &amp;quot;end_year&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 6
##    name      proportion_male proportion_female gender year_min year_max
##  * &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 alice              0.0033            0.997  female     1940     1990
##  2 bebe               0                 1      female     1940     1990
##  3 charlotte          0.0026            0.997  female     1940     1990
##  4 daphne             0.0004            1.00   female     1940     1990
##  5 donny              0.996             0.0039 male       1940     1990
##  6 eddie              0.959             0.0414 male       1940     1990
##  7 frasier            1                 0      male       1940     1990
##  8 frederick          0.995             0.0052 male       1940     1990
##  9 gertrude           0.0008            0.999  female     1940     1990
## 10 gil                1                 0      male       1940     1990
## # ... with 13 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sorting-the-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sorting the Data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- gender_df(df, method = &amp;quot;ssa&amp;quot;, name_col = &amp;quot;name&amp;quot;, year_col = c(&amp;quot;start_year&amp;quot;, &amp;quot;end_year&amp;quot;))

results_classified &amp;lt;- results %&amp;gt;%
  select(name, proportion_male, gender) %&amp;gt;%
  arrange(desc(proportion_male)) 

ggtexttable(results_classified, rows = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-09-gender-of-frasier-characters_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that “Mel” is a female character in the TV show. The calculations are tougher when the input is a nickname.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# just the main cast
main_cast_classified &amp;lt;- gender_df(main_cast, 
          method = &amp;quot;ssa&amp;quot;, name_col = &amp;quot;name&amp;quot;, 
          year_col = c(&amp;quot;start_year&amp;quot;, &amp;quot;end_year&amp;quot;)) %&amp;gt;%
  select(name, proportion_male, gender) %&amp;gt;%
  arrange(desc(proportion_male))

ggtexttable(main_cast_classified, rows = NULL)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-01-09-gender-of-frasier-characters_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Response to DataCamp&#39;s 20190404 Community Post</title>
      <link>/post/response-to-datacamp-s-20190404-community-post/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/response-to-datacamp-s-20190404-community-post/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the letter I sent out to my data science organization about the news that came out of DataCamp this week.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;4/6/2019&lt;/p&gt;
&lt;p&gt;Dear DatASci,&lt;/p&gt;
&lt;p&gt;I write to ask you for your input in developing a group response to these recent events.&lt;/p&gt;
&lt;p&gt;Overnight on Thursday, April 4, DataCamp released a statement in their official blog that you can find here: &lt;a href=&#34;https://www.datacamp.com/community/blog/note-to-our-community&#34; class=&#34;uri&#34;&gt;https://www.datacamp.com/community/blog/note-to-our-community&lt;/a&gt;. To summarize, in October of 2017, an executive at the company sexually harassed an employee at a company social event. The employee reported the event a few months later, which means that the official statement finally appeared about a full year later. Furthermore, DataCamp only released that statement after a unified complaint from over 100 instructors.&lt;/p&gt;
&lt;p&gt;At this moment, I wish to personally condemn the perpetrator and the leadership at DataCamp over their actions and mismanagement of their company culture.&lt;/p&gt;
&lt;p&gt;It is simple to state that I do not condone the behavior of that employee and the peers. However, it is difficult to reconcile the event with my relationship with the DataCamp company itself. The educational material has allowed me to increase my status at my own workplace, and I have subsequently and frequently recommended DataCamp to those who also wished to improve their technical skills. During the Spring semester and Summer session of 2018, I led efforts to connect our DatASci club and graduate students with the online courses offered by DataCamp.&lt;/p&gt;
&lt;p&gt;In addition to coordinating the use of the education product, I have met several wonderful DataCamp employees and instructors at conferences—all while being unaware of negligent events happening in the background. I might have even met the perpetrator too.&lt;/p&gt;
&lt;p&gt;This news coming out of DataCamp is quite antithetical to the culture of the data science community. Just the day before in the Twitter space, we were praising the data science community on being diverse, inclusive, and very genial to programmers of all skill levels. Unfortunately, the actions made by DataCamp is a step backward and will leave a scar. We can do better.&lt;/p&gt;
&lt;p&gt;The views here presented in this letter are my own and do not reflect the opinion or stances of my colleagues at UC Merced for the simple reason that this letter is the dissemination of the news to my peers in the DatASci graduate student organization and my coworkers at UC Merced. If we need to solidify a view of the DataCamp business and our relationship with this education partner and the values of vendors, I will welcome future conversation about these matters.&lt;/p&gt;
&lt;p&gt;Sincerely,
Derek Sollberger
Continuing Lecturer at UC Merced&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Response to DataCamp&#39;s 20190404 Community Post</title>
      <link>/post/response-to-datacamp-s-20190404-community-post/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/response-to-datacamp-s-20190404-community-post/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is the letter I sent out to my data science organization about the news that came out of DataCamp this week.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4/6/2019&lt;/p&gt;

&lt;p&gt;Dear DatASci,&lt;/p&gt;

&lt;p&gt;I write to ask you for your input in developing a group response to these recent events.&lt;/p&gt;

&lt;p&gt;Overnight on Thursday, April 4, DataCamp released a statement in their official blog that you can find here:  &lt;a href=&#34;https://www.datacamp.com/community/blog/note-to-our-community&#34; target=&#34;_blank&#34;&gt;https://www.datacamp.com/community/blog/note-to-our-community&lt;/a&gt;.  To summarize, in October of 2017, an executive at the company sexually harassed an employee at a company social event.  The employee reported the event a few months later, which means that the official statement finally appeared about a full year later.  Furthermore, DataCamp only released that statement after a unified complaint from over 100 instructors.&lt;/p&gt;

&lt;p&gt;At this moment, I wish to personally condemn the perpetrator and the leadership at DataCamp over their actions and mismanagement of their company culture.&lt;/p&gt;

&lt;p&gt;It is simple to state that I do not condone the behavior of that employee and the peers.  However, it is difficult to reconcile the event with my relationship with the DataCamp company itself.  The educational material has allowed me to increase my status at my own workplace, and I have subsequently and frequently recommended DataCamp to those who also wished to improve their technical skills.  During the Spring semester and Summer session of 2018, I led efforts to connect our DatASci club and graduate students with the online courses offered by DataCamp.&lt;/p&gt;

&lt;p&gt;In addition to coordinating the use of the education product, I have met several wonderful DataCamp employees and instructors at conferences&amp;mdash;all while being unaware of negligent events happening in the background.  I might have even met the perpetrator too.&lt;/p&gt;

&lt;p&gt;This news coming out of DataCamp is quite antithetical to the culture of the data science community.  Just the day before in the Twitter space, we were praising the data science community on being diverse, inclusive, and very genial to programmers of all skill levels.  Unfortunately, the actions made by DataCamp is a step backward and will leave a scar.  We can do better.&lt;/p&gt;

&lt;p&gt;The views here presented in this letter are my own and do not reflect the opinion or stances of my colleagues at UC Merced for the simple reason that this letter is the dissemination of the news to my peers in the DatASci graduate student organization and my coworkers at UC Merced.  If we need to solidify a view of the DataCamp business and our relationship with this education partner and the values of vendors, I will welcome future conversation about these matters.&lt;/p&gt;

&lt;p&gt;Sincerely,
Derek Sollberger
Continuing Lecturer at UC Merced&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Walks (draft)</title>
      <link>/post/random-walks-draft/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/random-walks-draft/</guid>
      <description>&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;gganimate&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;p-12&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;p = 1/2&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parameters
p &amp;lt;- 0.5
Tmax = 60

# start at the origin
x = 0
y = 0
t = 0
df &amp;lt;- data.frame(x,y,t)

# random walk
for(i in 1:Tmax){
  t &amp;lt;- t + 1
  if(runif(1) &amp;lt; p){
    x &amp;lt;- x - 1
  } else {
    x &amp;lt;- x + 1
  }
  
  # reset process if dot leaves view
  if(abs(x) &amp;gt; 10){
    x &amp;lt;- 0
  }
  
  this_step &amp;lt;- data.frame(x,y,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x,y)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_point(color = &amp;quot;blue&amp;quot;, size = 10) +
  labs(title = &amp;quot;Random Walk (p = 1/2)&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1) +
  shadow_wake(colour = &amp;quot;gray&amp;quot;, wake_length = 0.2, alpha = 0.4)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-2-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;histogram&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- 1/2
Tmax = 60
N &amp;lt;- 100 # number of starting &amp;quot;dots&amp;quot;

# start at the origin
x &amp;lt;- rep(0,N)
t &amp;lt;- rep(0,N)
df &amp;lt;- data.frame(x,t)

# random walk
for(i in 1:Tmax){
  for(j in 1:N){
    if(runif(1) &amp;lt; p){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  t &amp;lt;- rep(i,N)
  
  this_step &amp;lt;- data.frame(x,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_bar(fill = &amp;quot;blue&amp;quot;, stat = &amp;quot;count&amp;quot;) +
  labs(title = &amp;quot;Random Walk (p = 1/2)&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-3-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-random-walks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Multiple Random Walks&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pL &amp;lt;- 3/4
pM &amp;lt;- 1/2
pR &amp;lt;- 7/16
Tmax = 60
N &amp;lt;- 300 # number of starting &amp;quot;dots&amp;quot; (use a number divisible by 3)

# start at the origin
x &amp;lt;- rep(0,N)
t &amp;lt;- rep(0,N)
group &amp;lt;- c(rep(&amp;quot;transient left&amp;quot;, N/3),
           rep(&amp;quot;recurrent&amp;quot;, N/3), 
           rep(&amp;quot;transient right&amp;quot;, N/3))
df &amp;lt;- data.frame(x,t, group)

# random walk
for(i in 1:Tmax){
  for(j in 1:(N/3)){
    if(runif(1) &amp;lt; pL){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  for(j in (N/3+1):(2*N/3)){
    if(runif(1) &amp;lt; pM){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  for(j in (2*N/3+1):N){
    if(runif(1) &amp;lt; pR){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  
  t &amp;lt;- rep(i,N)
  this_step &amp;lt;- data.frame(x,t,group)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_bar(aes(fill = group),
           stat = &amp;quot;count&amp;quot;, position=position_dodge()) +
  labs(title = &amp;quot;Random Walks&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(trans=&amp;#39;log2&amp;#39;, breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-4-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;drunkards-walk&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Drunkard’s Walk&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parameters
Tmax = 60

# start at the origin
x = 0
y = 0
t = 0
df &amp;lt;- data.frame(x,y,t)

# random walk
for(i in 1:Tmax){
  t &amp;lt;- t + 1
  rand_num &amp;lt;- runif(1)
  if(rand_num &amp;lt; 0.25){
    x &amp;lt;- x - 1
  } else if(rand_num &amp;lt; 0.5){
    y &amp;lt;- y - 1
  } else if(rand_num &amp;lt; 0.75){
    x &amp;lt;- x + 1
  } else {
    y &amp;lt;- y + 1
  }
  
  # reset process if dot leaves view
  if(abs(x) &amp;gt; 10){
    x &amp;lt;- 0
    y &amp;lt;- 0
  }
  if(abs(y) &amp;gt; 10){
    x &amp;lt;- 0
    y &amp;lt;- 0
  }
  
  this_step &amp;lt;- data.frame(x,y,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x,y)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_point(color = &amp;quot;blue&amp;quot;, size = 10) +
  labs(title = &amp;quot;Drunkard&amp;#39;s Walk&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = -10:10) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1) +
  shadow_wake(colour = &amp;quot;gray&amp;quot;, wake_length = 0.2, alpha = 0.4)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-5-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Valentine&#39;s Day 2019</title>
      <link>/post/valentine-s-day-2019/</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/valentine-s-day-2019/</guid>
      <description>&lt;p&gt;In this short project, I hope to draw a heart through an animation of appearing dots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;gganimate&amp;quot;)
library(&amp;quot;ggforce&amp;quot;)
library(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;draw-a-heart&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Draw a Heart&lt;/h1&gt;
&lt;p&gt;Here I will place two circles centered at &lt;span class=&#34;math inline&#34;&gt;\((\pm 1, 1)\)&lt;/span&gt; with the same radius &lt;span class=&#34;math inline&#34;&gt;\(r = \sqrt{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;circles &amp;lt;- data.frame(
  x0 = c(-1,1),
  y0 = rep(1,2),
  r = rep(1, 2)
)

right_pt &amp;lt;- (sqrt(2) + 1) / sqrt(2)
left_pt &amp;lt;-  -1*right_pt
f &amp;lt;- function(x){abs(x) - sqrt(2)}

ggplot(data.frame(x = c(left_pt, right_pt)), aes(x)) +
  coord_fixed() +
  geom_circle(aes(x0 = x0, y0 = y0, r = r), data = circles, inherit.aes = FALSE) +
  stat_function(fun = f, geom = &amp;quot;line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-14-valentine-s-day-2019_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generate-some-dots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Generate Some Dots&lt;/h1&gt;
&lt;p&gt;Now let’s see if I can get some red dots into a heart shape and green dots outside of the heart.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# initialization
N &amp;lt;- 10000
x &amp;lt;- runif(N, -2, 2)
y &amp;lt;- runif(N, -sqrt(2), 2)
colors = c(&amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;, rep(&amp;quot;green&amp;quot;, N-2)) #factor levels set early
state = rep(1, N)

# separate colors
for (i in 4:N){
  if (y[i] &amp;lt; 1){
    if (y[i] &amp;gt; (abs(x[i]) - sqrt(2))){colors[i] = &amp;quot;red&amp;quot;}
  } else {
    if(sqrt((x[i] - 1)^2 + (y[i] - 1)^2) &amp;lt; 1 | 
       sqrt((x[i] + 1)^2 + (y[i] - 1)^2) &amp;lt; 1){colors[i] = &amp;quot;red&amp;quot;}
  }
}

dot_df &amp;lt;- data.frame(x,y, colors, state)
dot_df %&amp;gt;%
  ggplot(aes(x = x, y = y)) +
    coord_fixed() +
    geom_point(color = colors) +
    theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-14-valentine-s-day-2019_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Animation&lt;/h1&gt;
&lt;p&gt;My initial plan was to have the dots appear one at a time to gradually make the heart, but the data storage was prohibitive. This back up plan was to literally make a new set of dots for each animation frame—and color the dots again!—and it comes with a neat “heartbeat” effect. The render time for the animated GIF was about 2 minutes on my computer.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;max_iter &amp;lt;- 14 #number of animation frames

for(j in 1:max_iter){
  x &amp;lt;- runif(N, -2, 2)
  y &amp;lt;- runif(N, -sqrt(2), 2)
  colors = c(&amp;quot;white&amp;quot;, &amp;quot;red&amp;quot;, rep(&amp;quot;green&amp;quot;, N-2)) #factor levels set early
  
  for (i in 4:N){
    if (y[i] &amp;lt; 1){
      if (y[i] &amp;gt; (abs(x[i]) - sqrt(2))){colors[i] = &amp;quot;red&amp;quot;}
    } else {
      if(sqrt((x[i] - 1)^2 + (y[i] - 1)^2) &amp;lt; 1 | 
         sqrt((x[i] + 1)^2 + (y[i] - 1)^2) &amp;lt; 1){colors[i] = &amp;quot;red&amp;quot;}
    }
  }

  state &amp;lt;- rep(j, N)
  this_df &amp;lt;- data.frame(x, y, colors, state)
  #colnames(this_df) &amp;lt;- c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;colors&amp;quot;, &amp;quot;state&amp;quot;)
  dot_df &amp;lt;- rbind(dot_df, this_df)
}

dot_df %&amp;gt;%
  ggplot(aes(x = x, y = y)) +
    coord_fixed() +
    geom_point(color = dot_df$colors) +
    labs(title = &amp;quot;Valentine&amp;#39;s Day 2019&amp;quot;,
         subtitle = &amp;quot;Frame: {closest_state}&amp;quot;,
         caption = &amp;quot;Made by Derek Sollberger with the #gganimate package&amp;quot;) +
    theme_minimal() +
    transition_states(state, transition_length = 1, state_length = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-14-valentine-s-day-2019_files/figure-html/unnamed-chunk-4-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to R Workshop</title>
      <link>/post/introduction-to-r-workshop/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-r-workshop/</guid>
      <description>&lt;div id=&#34;packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Packages&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;workshop_packages &amp;lt;-c(&amp;quot;ggplot2&amp;quot;, &amp;quot;mosaic&amp;quot;, &amp;quot;gganimate&amp;quot;)
install.packages(workshop_packages)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;gganimate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;ggplot2&amp;quot;)
library(&amp;quot;mosaic&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: dplyr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: lattice&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggformula&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggstance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;ggstance&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:ggplot2&amp;#39;:
## 
##     geom_errorbarh, GeomErrorbarh&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## New to ggformula?  Try the tutorials: 
##  learnr::run_tutorial(&amp;quot;introduction&amp;quot;, package = &amp;quot;ggformula&amp;quot;)
##  learnr::run_tutorial(&amp;quot;refining&amp;quot;, package = &amp;quot;ggformula&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: mosaicData&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: Matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## The &amp;#39;mosaic&amp;#39; package masks several functions from core packages in order to add 
## additional features.  The original behavior of these functions should not be affected by this.
## 
## Note: If you use the Matrix package, be sure to load it BEFORE loading mosaic.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;mosaic&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:Matrix&amp;#39;:
## 
##     mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:dplyr&amp;#39;:
## 
##     count, do, tally&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:ggplot2&amp;#39;:
## 
##     stat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     binom.test, cor, cor.test, cov, fivenum, IQR, median,
##     prop.test, quantile, sd, t.test, var&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     max, mean, min, prod, range, sample, sum&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(Weather)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 25
## # Groups:   city, year [1]
##   city  date        year month   day high_temp avg_temp low_temp high_dewpt
##   &amp;lt;chr&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1 Auck~ 2016-01-01  2016     1     1        68       65       62         64
## 2 Auck~ 2016-01-02  2016     1     2        68       66       64         64
## 3 Auck~ 2016-01-03  2016     1     3        77       72       66         70
## 4 Auck~ 2016-01-04  2016     1     4        73       66       60         66
## 5 Auck~ 2016-01-05  2016     1     5        69       62       55         55
## 6 Auck~ 2016-01-06  2016     1     6        69       63       57         54
## # ... with 16 more variables: avg_dewpt &amp;lt;dbl&amp;gt;, low_dewpt &amp;lt;dbl&amp;gt;,
## #   high_humidity &amp;lt;dbl&amp;gt;, avg_humidity &amp;lt;dbl&amp;gt;, low_humidity &amp;lt;dbl&amp;gt;,
## #   high_hg &amp;lt;dbl&amp;gt;, avg_hg &amp;lt;dbl&amp;gt;, low_hg &amp;lt;dbl&amp;gt;, high_vis &amp;lt;dbl&amp;gt;,
## #   avg_vis &amp;lt;dbl&amp;gt;, low_vis &amp;lt;dbl&amp;gt;, high_wind &amp;lt;dbl&amp;gt;, avg_wind &amp;lt;dbl&amp;gt;,
## #   low_wind &amp;lt;dbl&amp;gt;, precip &amp;lt;chr&amp;gt;, events &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(Weather$city)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Auckland   Beijing   Chicago    Mumbai San Diego 
##       731       731       731       731       731&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(Weather$year)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## 2016 2017 
## 1830 1825&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-statistics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sample Statistics&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(Weather$high_temp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 71.32421&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(Weather$precip)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd(Weather$avg_wind)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.865026&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plotting&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Chicago &amp;lt;- subset(Weather, city == &amp;quot;Chicago&amp;quot;)

# boxplots
ggplot(Chicago, aes(x = month, y = high_temp, group = month, fill = month)) +
  geom_boxplot() +
  labs(title = &amp;quot;Chicago Weather (2016-2017)&amp;quot;,
       x = &amp;quot;month&amp;quot;,
       y = &amp;quot;high temperature&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-05-introduction-to-r-workshop_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;regression&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Regression&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(Chicago, aes(x = high_temp, y = low_temp, color = year)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;) +
  labs(title = &amp;quot;Chicago Weather (2016-2017)&amp;quot;,
       x = &amp;quot;high temperature&amp;quot;,
       y = &amp;quot;low temperature&amp;quot;) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-05-introduction-to-r-workshop_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;hypothesis-testing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Hypothesis Testing&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SanDiego &amp;lt;- subset(Weather, city == &amp;quot;San Diego&amp;quot;)

# Do Chicago and San Diego have the same high temperatures?
t.test(Chicago$high_temp, SanDiego$high_temp, alternative = &amp;quot;two.sided&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  Chicago$high_temp and SanDiego$high_temp
## t = -14.221, df = 886.31, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -13.21560 -10.01012
## sample estimates:
## mean of x mean of y 
##  61.00821  72.62107&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;animation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Animation&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(Weather, aes(x = high_temp, y = low_temp, color = city)) +
  geom_point() +
  labs(title = &amp;quot;Worldwide Weather (2016-2017)&amp;quot;,
       caption = &amp;quot;Source: Mosaic Foundation&amp;quot;,
       subtitle = &amp;quot;(by months)&amp;quot;,
       x = &amp;quot;high temperature&amp;quot;,
       y = &amp;quot;low temperature&amp;quot;) +
  theme_minimal() +
  transition_states(month, transition_length = 1, state_length = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-02-05-introduction-to-r-workshop_files/figure-html/unnamed-chunk-8-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
