<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stochastic processes | Derek Sollberger&#39;s Blog</title>
    <link>https://dsollberger.netlify.com/category/stochastic-processes/</link>
      <atom:link href="https://dsollberger.netlify.com/category/stochastic-processes/index.xml" rel="self" type="application/rss+xml" />
    <description>stochastic processes</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 13 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dsollberger.netlify.com/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>stochastic processes</title>
      <link>https://dsollberger.netlify.com/category/stochastic-processes/</link>
    </image>
    
    <item>
      <title>Duolingo Leagues</title>
      <link>https://dsollberger.netlify.com/post/duolingo-leagues/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://dsollberger.netlify.com/post/duolingo-leagues/</guid>
      <description>


&lt;p&gt;&lt;code&gt;Duolingo&lt;/code&gt;, the language learning app, places users in groups of 50 and assigns a &lt;code&gt;league&lt;/code&gt; to each user to encourage competition. The leagues are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bronze, Silver, Gold, Sapphire, Ruby, Emerald, Amethyst, Pearl, Obsidian, and Diamond (in that increasing order)&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;what-proportion-of-duolingo-users-are-in-each-league&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What proportion of Duolingo users are in each league?&lt;/h1&gt;
&lt;p&gt;The rules are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;everyone starts in the Bronze League&lt;/li&gt;
&lt;li&gt;the top 15 percent of each group gets promoted to the next league up (measured weekly)&lt;/li&gt;
&lt;li&gt;the bottom 10 percent of each group is related downward&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post, I will try out some stochastic processes calculations to answer that question.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;leagues &amp;lt;- c(&amp;quot;Bronze&amp;quot;, &amp;quot;Silver&amp;quot;, &amp;quot;Gold&amp;quot;, &amp;quot;Sapphire&amp;quot;, &amp;quot;Ruby&amp;quot;,
             &amp;quot;Emerald&amp;quot;, &amp;quot;Amethyst&amp;quot;, &amp;quot;Pearl&amp;quot;, &amp;quot;Obsidian&amp;quot;, &amp;quot;Diamond&amp;quot;)

transition_matrix &amp;lt;- matrix( rep(0, 100), 10)

# trying shortcuts
diag(transition_matrix[-10,-1]) &amp;lt;- 15 #top 15 percent of each group gets promoted
diag(transition_matrix[-1,-10]) &amp;lt;- 10 #bottom 10 percent of each group is relegated
diag(transition_matrix)         &amp;lt;- 75 #the rest stay where they are

# fix the corners
transition_matrix[1,1]    &amp;lt;- 85
transition_matrix[10, 10] &amp;lt;- 85

# make row-stochastic (i.e. so each row adds up to one)
transition_matrix &amp;lt;- transition_matrix/100

# R allows user to label rows and columns
rownames(transition_matrix) &amp;lt;- leagues
colnames(transition_matrix) &amp;lt;- leagues

print(transition_matrix)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          Bronze Silver Gold Sapphire Ruby Emerald Amethyst Pearl Obsidian
## Bronze     0.85   0.15 0.00     0.00 0.00    0.00     0.00  0.00     0.00
## Silver     0.10   0.75 0.15     0.00 0.00    0.00     0.00  0.00     0.00
## Gold       0.00   0.10 0.75     0.15 0.00    0.00     0.00  0.00     0.00
## Sapphire   0.00   0.00 0.10     0.75 0.15    0.00     0.00  0.00     0.00
## Ruby       0.00   0.00 0.00     0.10 0.75    0.15     0.00  0.00     0.00
## Emerald    0.00   0.00 0.00     0.00 0.10    0.75     0.15  0.00     0.00
## Amethyst   0.00   0.00 0.00     0.00 0.00    0.10     0.75  0.15     0.00
## Pearl      0.00   0.00 0.00     0.00 0.00    0.00     0.10  0.75     0.15
## Obsidian   0.00   0.00 0.00     0.00 0.00    0.00     0.00  0.10     0.75
## Diamond    0.00   0.00 0.00     0.00 0.00    0.00     0.00  0.00     0.10
##          Diamond
## Bronze      0.00
## Silver      0.00
## Gold        0.00
## Sapphire    0.00
## Ruby        0.00
## Emerald     0.00
## Amethyst    0.00
## Pearl       0.00
## Obsidian    0.15
## Diamond     0.85&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Knowing some about stochastic processes, we can either implement an initial distribution and employ matrix-vector multiplication over many iterations, or we can find an eigenvector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;findStatDist &amp;lt;- function(P){
  # This function will compute the stationary distribution for a transition matrix
  # Input: row-stochastic matrix P
  # Output: row vector pi_vec
  
  # obtain left-eigenvector for lambda = 1
  x &amp;lt;- eigen(t(P))$vectors[,1] 
  
  # normalize the eigenvector in the one-norm
  pi_vec &amp;lt;- x / sum(x)
  pi_vec #return this vector
}

answer &amp;lt;- as.data.frame(round(100*findStatDist(transition_matrix)))

# R allows user to label rows and columns
rownames(answer) &amp;lt;- leagues
colnames(answer) &amp;lt;- &amp;quot;percentage&amp;quot;

print(answer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          percentage
## Bronze            3
## Silver            4
## Gold              5
## Sapphire          7
## Ruby              9
## Emerald          11
## Amethyst         13
## Pearl            15
## Obsidian         16
## Diamond          17&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Random Walks (draft)</title>
      <link>https://dsollberger.netlify.com/post/random-walks-draft/</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://dsollberger.netlify.com/post/random-walks-draft/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;gganimate&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;p-12&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;p = 1/2&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parameters
p &amp;lt;- 0.5
Tmax = 60

# start at the origin
x = 0
y = 0
t = 0
df &amp;lt;- data.frame(x,y,t)

# random walk
for(i in 1:Tmax){
  t &amp;lt;- t + 1
  if(runif(1) &amp;lt; p){
    x &amp;lt;- x - 1
  } else {
    x &amp;lt;- x + 1
  }
  
  # reset process if dot leaves view
  if(abs(x) &amp;gt; 10){
    x &amp;lt;- 0
  }
  
  this_step &amp;lt;- data.frame(x,y,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x,y)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_point(color = &amp;quot;blue&amp;quot;, size = 10) +
  labs(title = &amp;quot;Random Walk (p = 1/2)&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1) +
  shadow_wake(colour = &amp;quot;gray&amp;quot;, wake_length = 0.2, alpha = 0.4)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-2-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;histogram&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;histogram&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- 1/2
Tmax = 60
N &amp;lt;- 100 # number of starting &amp;quot;dots&amp;quot;

# start at the origin
x &amp;lt;- rep(0,N)
t &amp;lt;- rep(0,N)
df &amp;lt;- data.frame(x,t)

# random walk
for(i in 1:Tmax){
  for(j in 1:N){
    if(runif(1) &amp;lt; p){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  t &amp;lt;- rep(i,N)
  
  this_step &amp;lt;- data.frame(x,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_bar(fill = &amp;quot;blue&amp;quot;, stat = &amp;quot;count&amp;quot;) +
  labs(title = &amp;quot;Random Walk (p = 1/2)&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-3-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-random-walks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Multiple Random Walks&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pL &amp;lt;- 3/4
pM &amp;lt;- 1/2
pR &amp;lt;- 7/16
Tmax = 60
N &amp;lt;- 300 # number of starting &amp;quot;dots&amp;quot; (use a number divisible by 3)

# start at the origin
x &amp;lt;- rep(0,N)
t &amp;lt;- rep(0,N)
group &amp;lt;- c(rep(&amp;quot;transient left&amp;quot;, N/3),
           rep(&amp;quot;recurrent&amp;quot;, N/3), 
           rep(&amp;quot;transient right&amp;quot;, N/3))
df &amp;lt;- data.frame(x,t, group)

# random walk
for(i in 1:Tmax){
  for(j in 1:(N/3)){
    if(runif(1) &amp;lt; pL){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  for(j in (N/3+1):(2*N/3)){
    if(runif(1) &amp;lt; pM){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  for(j in (2*N/3+1):N){
    if(runif(1) &amp;lt; pR){
      x[j] &amp;lt;- x[j] - 1
    } else {
      x[j] &amp;lt;- x[j] + 1
    }
  }
  
  t &amp;lt;- rep(i,N)
  this_step &amp;lt;- data.frame(x,t,group)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_bar(aes(fill = group),
           stat = &amp;quot;count&amp;quot;, position=position_dodge()) +
  labs(title = &amp;quot;Random Walks&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(trans=&amp;#39;log2&amp;#39;, breaks = NULL) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals

## Warning: position_dodge requires non-overlapping x intervals&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-4-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;drunkards-walk&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Drunkard’s Walk&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parameters
Tmax = 60

# start at the origin
x = 0
y = 0
t = 0
df &amp;lt;- data.frame(x,y,t)

# random walk
for(i in 1:Tmax){
  t &amp;lt;- t + 1
  rand_num &amp;lt;- runif(1)
  if(rand_num &amp;lt; 0.25){
    x &amp;lt;- x - 1
  } else if(rand_num &amp;lt; 0.5){
    y &amp;lt;- y - 1
  } else if(rand_num &amp;lt; 0.75){
    x &amp;lt;- x + 1
  } else {
    y &amp;lt;- y + 1
  }
  
  # reset process if dot leaves view
  if(abs(x) &amp;gt; 10){
    x &amp;lt;- 0
    y &amp;lt;- 0
  }
  if(abs(y) &amp;gt; 10){
    x &amp;lt;- 0
    y &amp;lt;- 0
  }
  
  this_step &amp;lt;- data.frame(x,y,t)
  df &amp;lt;- rbind(df, this_step)
}

p &amp;lt;- ggplot(df, aes(x,y)) +
  coord_cartesian(xlim = c(-10, 10)) +
  geom_point(color = &amp;quot;blue&amp;quot;, size = 10) +
  labs(title = &amp;quot;Drunkard&amp;#39;s Walk&amp;quot;,
       subtitle = &amp;quot;t = {closest_state}&amp;quot;,
       caption = &amp;quot;Math 181&amp;quot;,
       x = &amp;quot;&amp;quot;,
       y = &amp;quot;&amp;quot;) +
  scale_x_continuous(breaks = -10:10) +
  scale_y_continuous(breaks = -10:10) +
  theme_minimal() +
  transition_states(t, transition_length = 1, state_length = 1) +
  shadow_wake(colour = &amp;quot;gray&amp;quot;, wake_length = 0.2, alpha = 0.4)

animate(p, fps = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-02-25-random-walks-draft_files/figure-html/unnamed-chunk-5-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graduation Rates</title>
      <link>https://dsollberger.netlify.com/post/graduation-rates/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://dsollberger.netlify.com/post/graduation-rates/</guid>
      <description>


&lt;p&gt;In this post, I want to run an example of absorbing states in stochastic processes. This example is based on Example 3.29 in &lt;em&gt;Introduction to Stochastic Processes&lt;/em&gt; in R by Robert Dobrow.&lt;/p&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data&lt;/h1&gt;
&lt;p&gt;The data I have assembled is based on &lt;a href=&#34;https://irds.ucmerced.edu/student-data&#34;&gt;IRDS reports&lt;/a&gt; from my own University of California at Merced.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# weights
weights &amp;lt;- c(20, 70, 0, 0, 10, 0, 
       0, 5, 89, 0, 6, 0, 
       0, 0, 3, 94, 3, 0, 
       0, 0, 0, 24, 1, 76, 
       0, 0, 0, 0, 100, 0, 
       0, 0, 0, 0, 0, 100)
sparse_weights &amp;lt;- weights[weights &amp;gt; 0]

# transition matrix (row stochastic)
P &amp;lt;- matrix(weights, nrow = 6, byrow = TRUE)*0.01

# states
rownames(P) &amp;lt;- c(&amp;quot;Freshman&amp;quot;, &amp;quot;Sophomore&amp;quot;, &amp;quot;Junior&amp;quot;, &amp;quot;Senior&amp;quot;, &amp;quot;Dropped&amp;quot;, &amp;quot;Graduated&amp;quot;)
colnames(P) &amp;lt;- c(&amp;quot;Freshman&amp;quot;, &amp;quot;Sophomore&amp;quot;, &amp;quot;Junior&amp;quot;, &amp;quot;Senior&amp;quot;, &amp;quot;Dropped&amp;quot;, &amp;quot;Graduated&amp;quot;)
P&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           Freshman Sophomore Junior Senior Dropped Graduated
## Freshman       0.2      0.70   0.00   0.00    0.10      0.00
## Sophomore      0.0      0.05   0.89   0.00    0.06      0.00
## Junior         0.0      0.00   0.03   0.94    0.03      0.00
## Senior         0.0      0.00   0.00   0.24    0.01      0.76
## Dropped        0.0      0.00   0.00   0.00    1.00      0.00
## Graduated      0.0      0.00   0.00   0.00    0.00      1.00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This formulation assumes that about 10 percent of students drop after the first year, and about 24 percent of seniors continue to take classes into the fifth year or more.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;network-graph&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Network Graph&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(igraph)
network &amp;lt;- graph_from_adjacency_matrix(P, mode = &amp;quot;directed&amp;quot;, weighted = TRUE)
plot(network,
     edge.arrow.size = 0.5,
     edge.color = &amp;quot;#D4AE00&amp;quot;,
     edge.label = sparse_weights,
     layout = layout_in_circle(network))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-01-08-graduation-rates_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;absorbing-states&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Absorbing States&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# canonical form
Q &amp;lt;- P[1:4, 1:4]
R &amp;lt;- P[1:4, 5:6]

# fundamental matrix (inverse of (I - Q))
fundamental_matrix &amp;lt;- solve(diag(4) - Q)

# absorption
absorption &amp;lt;- fundamental_matrix %*% R
round(100*absorption)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           Dropped Graduated
## Freshman       22        79
## Sophomore      10        91
## Junior          4        97
## Senior          1       100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This model predicts that, starting with incoming students, about 79 percent of those students will eventually graduate while about 21 percent will eventually drop from UC Merced enrollment.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My First gganimate Plot</title>
      <link>https://dsollberger.netlify.com/post/my-first-gganimate-plot/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://dsollberger.netlify.com/post/my-first-gganimate-plot/</guid>
      <description>


&lt;p&gt;Today I finally read a &lt;a href=&#34;https://gganimate.com/articles/gganimate.html&#34;&gt;tutorial&lt;/a&gt; on &lt;code&gt;gganimate&lt;/code&gt;, and here I will build my first example. My hope is to eventually simulate traversal on a directed graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gganimate)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;create-node-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Create Node Data&lt;/h1&gt;
&lt;p&gt;For this example, I will have 3 nodes (located at 3 vertices of a triangle), 100 dots distributed among the nodes, and a new placement over 21 states in time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;N &amp;lt;- 100 # number of dots
T &amp;lt;- 20 # number of iterations

node_names &amp;lt;- c(&amp;quot;Node 1&amp;quot;, &amp;quot;Node 2&amp;quot;, &amp;quot;Node 3&amp;quot;)
iter &amp;lt;- rep(0, N)
node &amp;lt;- rep(&amp;quot;Node 1&amp;quot;, N)
x &amp;lt;- 10 + rnorm(N, 0, 2)
y &amp;lt;- 20 + rnorm(N, 0, 2)
states &amp;lt;- data.frame(iter, node, x, y)

for(t in 1:T){
  iter &amp;lt;- rep(t, N)
  node &amp;lt;- sample(node_names, N, replace = TRUE)
  x &amp;lt;- case_when(
    node == &amp;quot;Node 1&amp;quot; ~ 10 + rnorm(N, 0, 2),
    node == &amp;quot;Node 2&amp;quot; ~ 20 + rnorm(N, 0, 2),
    TRUE             ~ 30 + rnorm(N, 0, 2)
  )
  y &amp;lt;- case_when(
    node == &amp;quot;Node 1&amp;quot; ~ 20 + rnorm(N, 0, 2),
    node == &amp;quot;Node 2&amp;quot; ~ 30 + rnorm(N, 0, 2),
    TRUE             ~ 10 + rnorm(N, 0, 2)
  )
  this_state &amp;lt;- data.frame(iter, node, x, y)
  
  states &amp;lt;- rbind(states, this_state)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-network&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plot Network&lt;/h1&gt;
&lt;p&gt;Having made a new set of data at each state, the main tool is to use &lt;code&gt;transition_states&lt;/code&gt; over the iterations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;states %&amp;gt;% 
  ggplot(aes(x = x, y = y)) +
  geom_point(aes(color = node), alpha = 0.33) +
  labs(title = &amp;quot;Draft of Network Animation&amp;quot;,
       subtitle = &amp;quot;Iteration: {closest_state} of 20&amp;quot;,
       caption = &amp;quot;Simulation of random placement&amp;quot;) +
  theme_minimal() +
  transition_states(iter, transition_length = 1, state_length = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://dsollberger.netlify.com/post/2019-01-08-my-first-gganimate-plot_files/figure-html/unnamed-chunk-3-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
