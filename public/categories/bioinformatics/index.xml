<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioinformatics on The Median Data Scientist</title>
    <link>/categories/bioinformatics/</link>
    <description>Recent content in Bioinformatics on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Tue, 07 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/bioinformatics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Covid-19 Cases in the Central Valley</title>
      <link>/post/covid-19-cases-in-the-central-valley/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/covid-19-cases-in-the-central-valley/</guid>
      <description>DataSource: USA Facts — downloaded July 6, 2020
library(&amp;quot;tidyverse&amp;quot;)library(&amp;quot;zoo&amp;quot;)start_date &amp;lt;- &amp;quot;5/28/20&amp;quot;end_date &amp;lt;- &amp;quot;7/5/20&amp;quot;county_list &amp;lt;- c(&amp;quot;Santa Clara&amp;quot;, &amp;quot;Stanislaus&amp;quot;, &amp;quot;Calaveras&amp;quot;,&amp;quot;San Benito&amp;quot;, &amp;quot;Merced&amp;quot;, &amp;quot;Tuolumne&amp;quot;,&amp;quot;Fresno&amp;quot;, &amp;quot;Madera&amp;quot;, &amp;quot;Mariposa&amp;quot;)lag &amp;lt;- 7 #number of days for rolling average#loads filescases_raw &amp;lt;- read_csv(&amp;quot;covid_confirmed_usafacts.csv&amp;quot;)populations &amp;lt;- read_csv(&amp;quot;covid_county_population_usafacts.csv&amp;quot;)Data Wranglingraw_data_merged &amp;lt;- cases_raw %&amp;gt;%full_join(populations, by = c(&amp;quot;County Name&amp;quot;, &amp;quot;State&amp;quot;))# find column positions by datecolumn_names &amp;lt;- colnames(raw_data_merged)start_loc &amp;lt;- match(start_date, column_names)end_loc &amp;lt;- match(end_date, column_names)cases_filtered &amp;lt;- cases_raw %&amp;gt;%filter(State == &amp;quot;CA&amp;quot;) %&amp;gt;%select(&amp;quot;County Name&amp;quot;, all_of(start_loc:end_loc))populations_filtered &amp;lt;- populations %&amp;gt;%filter(State == &amp;quot;CA&amp;quot;) %&amp;gt;%select(&amp;quot;County Name&amp;quot;, &amp;quot;population&amp;quot;)df_merged &amp;lt;- cases_filtered %&amp;gt;%full_join(populations_filtered, by = &amp;quot;County Name&amp;quot;)df_clean &amp;lt;- df_merged %&amp;gt;%# avoids unallocated cases and the cruise ship!</description>
    </item>
    
    <item>
      <title>Introduction to Bioconductor</title>
      <link>/post/introduction-to-bioconductor/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/introduction-to-bioconductor/</guid>
      <description>“Bioconductor provides tools for the analysis and comprehension of high-throughput genomic data. Bioconductor uses the R statistical programming language, and is open source and open development.”
https://www.bioconductor.org/
library(&amp;quot;dplyr&amp;quot;)library(&amp;quot;ggplot2&amp;quot;)InstallationTo install core packages, type the following in an R command window.
This may take around 5 minutesWhen the option for updating packages appears, type in “a” for “all”#leave as eval = FALSE when knittingif (!</description>
    </item>
    
    <item>
      <title>gganatogram and gganimate</title>
      <link>/post/gganatogram-and-gganimate/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/gganatogram-and-gganimate/</guid>
      <description>Today I wanted to see if I could create a slideshow of pictures from the gganatogram package. I wanted to combine them with the gganimate package, but I have not figured out how to get that to work. (In particular, the gganatogram() function seems to return a different list layout than ggplot objects.)
library(gganatogram)## Loading required package: ggpolypath## Loading required package: ggplot2library(gganimate)library(profvis)N &amp;lt;- 25 # number of cell samplesnum_cell_parts &amp;lt;- nrow(cell_key$cell)# randomly select a random number of cell partspart_picker &amp;lt;- sample(1:num_cell_parts, sample(1:num_cell_parts, 1))cell_num &amp;lt;- rep(1, length(part_picker))this_cell &amp;lt;- cell_key[[&amp;#39;cell&amp;#39;]][part_picker, ]cell_samples &amp;lt;- cbind(this_cell, cell_num)for(j in 2:N){part_picker &amp;lt;- sample(1:num_cell_parts, sample(1:num_cell_parts, 1))cell_num &amp;lt;- rep(j, length(part_picker))this_cell &amp;lt;- cbind( cell_key[[&amp;#39;cell&amp;#39;]][part_picker, ], cell_num)cell_samples &amp;lt;- rbind(cell_samples, this_cell)# figure_list[j] &amp;lt;- gganatogram(data = this_cell,# outline = FALSE, fillOutline=&amp;#39;steelblue&amp;#39;, organism=&amp;quot;cell&amp;quot;, fill=&amp;quot;colour&amp;quot;) + # theme_void() + # coord_fixed()png(filename = paste0(j, &amp;quot;.</description>
    </item>
    
  </channel>
</rss>